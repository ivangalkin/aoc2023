#include <iostream>
#include <vector>
#include <array>
#include <set>
#include <iomanip>
#include <sstream>
#include <map>
#include <tuple>
#include <numeric>
#include <algorithm>

#include "23_utils.h"

#ifdef NDEBUG
#undef NDEBUG
#endif

#include <assert.h>

#define ASSERT_EQ(a, b) \
   do { __typeof__ (a) _a = (a); \
       __typeof__ (b) _b = (b); \
     if (_a != _b)       \
     {                 \
       std::cout << _a << " != " << _b << std::endl; \
       assert(0);                  \
     }                  \
     }while(0)

#define myprint(arg) do { std::cout << "" #arg << " = " << arg << std::endl; } while(0)

using ll = int64_t;

namespace {

    std::vector<std::string> input_real{
            "#.###########################################################################################################################################",
            "#.#.....###...#...#.....#.....................#.....................#...#.....#...#.....#...###.........#.........#.......#...#####...#.....#",
            "#.#.###.###.#.#.#.#.###.#.###################.#.###################.#.#.#.###.#.#.#.###.#.#.###.#######.#.#######.#.#####.#.#.#####.#.#.###.#",
            "#...#...#...#.#.#.#...#.#...............#.....#.........#...........#.#.#...#...#.#.#...#.#.###.#.......#...#.....#.....#.#.#.###...#.#.#...#",
            "#####.###.###.#.#.###.#.###############.#.#############.#.###########.#.###.#####.#.#.###.#.###.#.#########.#.#########.#.#.#.###.###.#.#.###",
            "#.....###.#...#.#...#.#.###...#.....###.#.###...###...#.#.#...#####...#...#.....#.#.#...#.#...#.#...#...#...#...#...#...#...#...#...#...#...#",
            "#.#######.#.###.###.#.#.###.#.#.###.###.#.###.#.###.#.#.#.#.#.#####.#####.#####.#.#.###.#.###.#.###.#.#.#.#####.#.#.#.#########.###.#######.#",
            "#.#...###.#.###.#...#.#...#.#.#...#.....#.....#.#...#.#.#.#.#.>.>.#.#.....#...#.#.#.#...#...#.#.#...#.#.#.....#.#.#.#.........#.###...#.....#",
            "#.#.#.###.#.###.#.###.###.#.#.###.#############.#.###.#.#.#.###v#.#.#.#####.#.#.#.#.#.#####.#.#.#.###.#.#####.#.#.#.#########.#.#####.#.#####",
            "#.#.#...#.#.#...#...#.#...#.#.#...#...........#.#...#...#...###.#...#...#...#...#.#.#...#...#...#...#.#.#...#.#...#.###...###.#.#...#.#.#...#",
            "#.#.###.#.#.#.#####.#.#.###.#.#.###.#########.#.###.###########.#######.#.#######.#.###.#.#########.#.#.#.#.#.#####.###.#.###.#.#.#.#.#.#.#.#",
            "#...###...#.#...#...#.#...#.#.#.....#.....#...#.....#...........###.....#.....#...#.#...#...#.......#.#.#.#.#.....#.#...#...#.#.#.#.#.#.#.#.#",
            "###########.###.#.###.###.#.#.#######.###.#.#########.#############.#########.#.###.#.#####.#.#######.#.#.#.#####.#.#.#####.#.#.#.#.#.#.#.#.#",
            "#...........#...#.#...#...#.#.......#...#.#.........#.............#...#...#...#...#.#.>.>.#.#.###...#.#.#.#...###.#.#...#...#.#.#.#.#.#...#.#",
            "#.###########.###.#.###.###.#######.###.#.#########.#############.###.#.#.#.#####.#.###v#.#.#.###.#.#.#.#.###.###.#.###.#.###.#.#.#.#.#####.#",
            "#.......#...#...#.#...#.###...#.....#...#.#.......#.#.............###...#.#.###...#.#...#...#...#.#.#.#.#...#.#...#.....#.#...#.#.#...###...#",
            "#######.#.#v###.#.###.#.#####.#.#####.###.#.#####.#.#.###################.#.###.###.#.#########.#.#.#.#.###.#.#.#########.#.###.#.#######.###",
            "#.....#...#.>.#.#...#.#.#...#.#.>.>.#...#...#...#...#...............#.....#...#.....#.#.........#.#.#.#.###.#.#.........#...###...#.....#...#",
            "#.###.#####v#.#.###.#.#.#.#.#.###v#.###.#####.#.###################.#.#######.#######.#.#########.#.#.#.###.#.#########.###########.###.###.#",
            "#...#...#...#...#...#.#.#.#...###.#.#...#...#.#.....###...#.........#.#...#...#.......#.#...#...#.#.#.#.#...#.>.>.....#.#.........#...#...#.#",
            "###.###.#.#######.###.#.#.#######.#.#.###.#.#.#####.###.#.#.#########.#.#.#.###.#######.#.#.#.#.#.#.#.#.#.#####v#####.#.#.#######.###.###.#.#",
            "###...#.#.......#.#...#.#.#.......#.#.###.#.#...#...#...#.#.......###.#.#.#.###.......#...#.#.#.#.#.#.#.#.#...#.....#...#.......#.....#...#.#",
            "#####.#.#######.#.#.###.#.#.#######.#.###.#.###.#.###.###.#######.###.#.#.#.#########.#####.#.#.#.#.#.#.#.#.#.#####.###########.#######.###.#",
            "###...#.....#...#.#.#...#.#...#...#...#...#...#.#...#...#.#.....#...#.#.#.#.#.....###.....#.#.#.#.#...#...#.#.#...#.....#.......#.....#.....#",
            "###.#######.#.###.#.#.###.###.#.#.#####.#####.#.###.###.#.#.###.###.#.#.#.#.#.###.#######.#.#.#.#.#########.#.#.#.#####.#.#######.###.#######",
            "#...#...###...###...#...#...#...#...###.....#.#.#...#...#...###.....#...#...#...#.........#.#.#...#...#.....#...#.#.....#.........#...#...###",
            "#.###.#.###############.###.#######.#######.#.#.#.###.#########################.###########.#.#####.#.#.#########.#.###############.###.#.###",
            "#...#.#...............#.#...###...#...#.....#...#...#.....#####.......#...#...#...........#...#...#.#.#.........#...#.....###...###.....#...#",
            "###.#.###############.#.#.#####.#.###.#.###########.#####.#####.#####.#.#.#.#.###########.#####.#.#.#.#########.#####.###.###.#.###########.#",
            "#...#.#.............#.#.#.#...#.#.#...#.#.........#.#...#...###.#.....#.#.#.#.#...........#...#.#...#.#...#...#.....#.#...#...#.............#",
            "#.###.#v###########.#.#.#.#.#.#.#.#.###.#.#######.#.#.#.###.###.#.#####.#.#.#.#.###########.#.#.#####.#.#.#.#.#####.#.#.###.#################",
            "#.....#.>.#...#...#.#.#.#.#.#...#...#...#.#.....#...#.#.....#...#.#...#.#.#.#.#.........###.#.#.....#...#.#.#.#...#.#.#...#...#.............#",
            "#######v#.#.#.#.#.#.#.#.#.#.#########.###.#.###.#####.#######.###.#.#.#.#.#.#.#########.###.#.#####v#####.#.#.#.#.#.#.###.###.#.###########.#",
            "#...#...#.#.#...#.#...#.#.#...#.....#...#.#.#...#...#...#...#...#.#.#.#.#.#.#.#...#.....#...#.....>.>...#...#...#...#.#...#...#.#...........#",
            "#.#.#.###.#.#####.#####.#.###.#.###.###.#.#.#.###.#.###v#.#.###.#.#.#.#.#.#.#.#.#.#.#####.#########v###.#############.#.###.###.#.###########",
            "#.#.#...#...#.....#...#...###...###.....#...#...#.#...>.>.#...#.#.#.#.#.#.#.#.#.#.#...#...#.......#...#...#.....#...#.#...#.....#.........###",
            "#.#.###.#####.#####.#.#########################.#.#####v#####.#.#.#.#.#.#.#.#.#.#.###v#.###.#####.###.###.#.###.#.#.#.###.###############.###",
            "#.#.....#.....###...#...###.....#.....###.......#.....#...#...#.#.#.#.#.#.#.#.#.#.#.>.>.###.....#.....#...#.#...#.#.#.#...#...#...###...#...#",
            "#.#######.#######.#####.###.###.#.###.###.###########.###.#.###.#.#.#.#.#.#.#.#.#.#.#v#########.#######.###.#.###.#.#.#.###.#.#.#.###.#.###.#",
            "#.......#.....#...#.....#...#...#...#...#...#...#...#...#.#.....#...#...#.#.#.#.#...#.........#.#.....#...#.#...#.#.#.#.###.#.#.#.#...#.....#",
            "#######.#####.#.###.#####.###.#####.###.###.#.#.#.#.###.#.###############.#.#.#.#############.#.#.###.###.#.###.#.#.#.#.###.#.#.#.#.#########",
            "#.......#.....#.#...#...#...#.#...#...#.#...#.#.#.#.#...#.#...#...#...###.#.#.#.#.......#...#.#...#...###...#...#.#.#.#...#.#.#.#.#...#...###",
            "#.#######.#####.#.###.#.###.#.#.#.###.#.#v###.#.#.#.#.###.#.#.#.#.#.#.###.#.#.#.#.#####.#.#.#.#####.#########.###.#.#.###.#.#.#.#.###v#.#.###",
            "#.#.....#...#...#...#.#.....#.#.#.#...#.>.>...#.#.#.#...#...#...#...#...#...#.#.#.....#...#...#.....#.......#.#...#...###.#.#.#.#...>.#.#.###",
            "#.#.###.###.#.#####.#.#######.#.#.#.#####v#####.#.#.###.###############.#####.#.#####.#########.#####.#####.#.#.#########.#.#.#.#####v#.#.###",
            "#...#...###.#...###.#...#.....#.#...#####.....#.#.#...#.#.....#...#.....#...#...#####.....#...#.....#.#.....#.#.#...#...#.#.#...#...#...#...#",
            "#####.#####.###.###.###.#.#####.#############.#.#.###.#.#.###.#.#.#.#####.#.#############.#.#.#####.#.#.#####.#.#.#.#.#.#.#.#####.#.#######.#",
            "#.....#...#.....#...#...#.#...#.#.....###...#.#...###...#...#...#...#...#.#.###...........#.#...###.#.#.#...#...#.#.#.#.#...###...#.......#.#",
            "#.#####.#.#######.###.###.#.#.#.#.###.###.#.#.#############.#########.#.#.#.###.###########.###.###.#.#.#.#.#####.#.#.#.#######.#########.#.#",
            "#.#...#.#...#...#.....###...#.#.#...#.....#...#.........#...#...#...#.#.#.#...#...........#...#.....#.#...#.#...#.#.#.#.#.....#.........#...#",
            "#.#.#.#.###.#.#.#############.#.###.###########.#######.#.###.#.#.#.#.#.#.###.###########.###.#######.#####.#.#.#.#.#.#.#.###.#########.#####",
            "#.#.#.#.###...#.....#...#...#.#.###...#...###...#.....#.#.....#...#...#.#.#...#.........#...#.#.......#...#.#.#.#.#.#.#.#.#...#...#...#...###",
            "#.#.#.#.###########.#.#.#.#.#.#.#####.#.#.###.###.###.#.###############.#.#.###.#######.###.#.#.#######.#.#.#.#.#.#.#.#.#.#.###.#.#.#.###v###",
            "#...#...#.........#...#...#.#.#...###...#...#...#...#...###...#.........#.#...#.......#.....#...#.....#.#...#.#.#.#.#.#.#.#...#.#.#.#...>.###",
            "#########.#######.#########.#.###.#########.###.###.#######.#.#.#########.###.#######.###########.###.#.#####.#.#.#.#.#.#.###.#.#.#.#####v###",
            "###.......#...###...........#.....#.....#...#...#...#...###.#.#.....#...#.#...#...###.#...#...###...#.#.#...#.#.#.#.#.#...###...#...#...#...#",
            "###.#######.#.#####################.###.#.###.###.###.#.###.#.#####v#.#.#.#.###.#.###v#.#.#.#.#####.#.#v#.#.#.#.#.#.#.###############.#.###.#",
            "#...#.......#.#...............#...#...#...###...#...#.#.#...#.#...>.>.#...#.#...#.#.>.>.#.#.#.#...#.#.>.>.#...#...#.#.....#.........#.#...#.#",
            "#.###.#######.#.#############.#.#.###.#########.###.#.#.#.###.#.###v#######.#.###.#.#v###.#.#.#.#.#.###v###########.#####.#.#######.#.###.#.#",
            "#.....#...#...#.#...#.........#.#.###.....#...#...#...#.#...#...###.......#.#.###...#.#...#.#.#.#.#.###.......#...#...#...#.......#.#...#...#",
            "#######.#.#.###.#.#.#.#########.#.#######.#.#.###.#####.###.#############.#.#.#######.#.###.#.#.#.#.#########.#.#.###.#.#########.#.###.#####",
            "#.......#.#...#.#.#...#...#...#.#.###.....#.#.#...###...#...#.............#...#.......#.....#...#.#.#.........#.#...#.#.#.........#.....#...#",
            "#.#######.###v#.#.#####.#.#.#.#.#.###.#####.#.#.#####.###.###.#################.#################.#.#.#########.###.#.#.#.###############.#.#",
            "#.......#.###.>.#.#...#.#.#.#...#...#.....#.#...#...#.....###.................#.................#...#...........#...#...#...#.............#.#",
            "#######.#.###v###.#.#.#.#.#.#######.#####.#.#####.#.#########################.#################.#################.#########.#.#############.#",
            "###...#.#.#...###.#.#.#.#.#...#.....#...#.#.......#...#...#...#...#...#...#...#...........#...#.#.....#...........###.....#...#...#...#...#.#",
            "###.#.#.#.#.#####.#.#.#.#.###.#.#####.#.#v###########.#.#.#.#.#.#.#.#.#.#.#.###.#########.#.#.#.#.###.#.#############.###.#####.#.#.#.#.#.#.#",
            "#...#...#.#.....#.#.#.#.#...#.#.#...#.#.>.>...#...#...#.#...#...#.#.#.#.#.#...#...#...###...#.#.#.#...#.....#...#...#.#...#.....#...#...#.#.#",
            "#.#######.#####.#.#.#.#.###.#.#.#.#.#.###v###.#.#.#.###.#########.#.#.#.#.###.###.#.#.#######.#.#.#.#######.#.#.#.#.#.#.###.#############.#.#",
            "#.......#.......#...#.#...#.#.#.#.#...#...###...#.#.###.........#...#...#.#...###...#.......#...#.#.###...#.#.#.#.#.#.#...#.............#.#.#",
            "#######.#############.###.#.#.#.#.#####.#########.#.###########.#########.#.###############.#####.#.###.#.#.#.#.#.#.#.###.#############.#.#.#",
            "#.......#...........#.#...#...#...#...#...###...#...#...........#.....#...#...#.............###...#...#.#.#.#.#...#...#...#...#.........#...#",
            "#.#######.#########.#.#.###########.#.###.###.#.#####.###########.###.#.#####.#.###############.#####.#.#.#.#.#########.###.#.#.#############",
            "#.#...#...#.....#...#...###.......#.#.#...#...#.#...#.........#...#...#...#...#.......#.......#...#...#.#.#...#.......#...#.#...#...###.....#",
            "#.#.#.#.###.###.#.#########.#####.#.#.#.###.###.#.#.#########.#.###.#####.#.#########.#.#####.###.#.###.#.#####.#####.###.#.#####.#.###.###.#",
            "#...#...###...#...#...#...#.....#.#.#.#...#...#.#.#.###.......#.#...#####...###...###...#.....#...#...#.#...#...#...#.#...#.......#.....#...#",
            "#############.#####.#.#.#.#####.#.#.#.###v###.#.#.#.###v#######.#.#############.#.#######.#####.#####.#.###.#.###.#.#.#.#################.###",
            "#...........#...#...#...#...#...#...#...>.>.#.#.#.#.#.>.>.......#.#######...#...#.#.......#...#...#...#.#...#...#.#.#...#...#.............###",
            "#.#########.###.#.#########.#.###########v#.#.#.#.#.#.#v#########.#######.#.#.###.#.#######.#.###.#.###.#.#####v#.#.#####.#.#.###############",
            "#.........#.....#.......###.#.#...........#.#.#...#.#.#.........#...###...#.#...#.#.....#...#.....#...#.#.....>.>.#.....#.#.#...............#",
            "#########.#############.###.#.#.###########.#.#####.#.#########.###.###.###.###.#.#####.#.###########.#.#######v#######.#.#.###############.#",
            "#.........#.....###...#...#...#...........#.#.....#.#.#.........###...#.#...#...#.###...#...........#.#...#.....###.....#.#.................#",
            "#.#########.###.###.#.###.###############.#.#####.#.#.#.#############.#.#.###.###.###.#############.#.###.#.#######.#####.###################",
            "#...#.......#...#...#.#...#.......#...#...#...#...#...#...........#...#.#...#...#...#.#...#.....#...#.....#.......#.....#...............#...#",
            "###.#.#######.###.###.#.###.#####.#.#.#.#####.#.#################.#.###.###.###.###.#.#.#.#.###.#.###############.#####.###############.#.#.#",
            "#...#.#.......###...#.#...#.....#...#...#####...#.................#...#.###...#.#...#.#.#.#...#.#.#...###...#...#.#.....###...#.........#.#.#",
            "#.###.#.###########.#.###.#####.#################.###################.#.#####.#.#.###v#.#.###.#.#.#.#.###.#.#.#.#.#.#######.#.#v#########.#.#",
            "#.....#.......###...#.....#...#.............#...#...........#.........#.#.....#.#...>.>.#.....#...#.#.....#...#...#.....#...#.>.#.........#.#",
            "#############v###.#########.#.#############.#.#.###########.#.#########.#.#####.#####v#############.###################.#.#####v#.#########.#",
            "#...###...###.>.#.....#.....#.........#.....#.#...###...#...#.....#...#.#...#...#...#.###.....#...#.................#...#.#.....#.#.........#",
            "#.#.###.#.###v#.#####.#.#############.#.#####.###.###.#.#.#######.#.#.#.###.#.###.#.#.###.###.#.#.#################.#.###.#.#####.#.#########",
            "#.#.#...#...#.#.#.....#.#...........#.#.....#...#.....#...#.....#.#.#.#.###...#...#.#.....#...#.#.#####...#...#...#.#...#.#.#...#.#.........#",
            "#.#.#.#####.#.#.#.#####.#.#########.#.#####.###.###########.###.#.#.#.#.#######.###.#######.###.#.#####.#.#.#.#.#.#.###.#.#.#.#.#.#########.#",
            "#.#.#.....#...#.#...###...#...#.....#...#...#...#...#.....#.#...#...#...###...#...#...#.....###.#.#.....#...#...#...###.#.#.#.#.#.###.......#",
            "#.#.#####.#####.###.#######.#.#.#######.#.###.###.#.#.###.#.#.#############.#.###.###.#.#######.#.#.###################.#.#.#.#.#.###.#######",
            "#.#.#####.....#...#.#.......#.#.......#.#...#.#...#.#.#...#.#.#...###...###.#...#...#.#...#.....#.#...........#...#.....#.#.#.#.#.#...###...#",
            "#.#.#########.###.#.#.#######.#######.#.###.#.#.###.#.#.###.#.#.#.###.#.###.###.###.#.###.#.#####.###########.#.#.#.#####.#.#.#.#.#.#####.#.#",
            "#.#...........###...#.......#.#...#...#.....#...###.#.#.....#.#.#.#...#...#.#...#...#.....#...#...#...........#.#.#.......#...#...#.......#.#",
            "#.#########################.#.#.#.#.###############.#.#######.#.#.#.#####.#.#.###.###########.#.###.###########.#.#########################.#",
            "#...#.......#...###...#.....#...#...#...#...#.....#...###.....#.#.#...#...#.#.#...#.....#...#.#...#.#...........#.......#.................#.#",
            "###.#.#####.#.#.###.#.#.#############.#.#.#.#.###.#######.#####.#.###.#.###.#.#v###.###.#.#.#.###.#.#.#################.#.###############.#.#",
            "###...###...#.#.###.#.#...#...###.....#...#.#...#.#...#...#####.#.#...#...#.#.>.>.#...#.#.#.#.#...#...#.........#...#...#...............#.#.#",
            "#########v###.#.###.#.###.#.#.###.#########.###.#.#.#.#.#######.#.#.#####.#.###v#.###.#.#.#.#.#.#######v#######.#.#.#.#################.#.#.#",
            "#.......#.>.#.#...#.#...#...#.....#.......#.#...#.#.#.#...###...#...#...#...#...#.....#...#.#.#.......>.>.#...#...#...###.....#.....#...#...#",
            "#.#####.#v#.#.###.#.###.###########.#####.#.#.###.#.#.###.###.#######.#.#####.#############.#.#########v#.#.#.###########.###.#.###.#.#######",
            "#.#...#...#.#.#...#.#...#...#.......#...#...#.#...#.#.###...#.........#.....#.............#.#.....#.....#...#...#...#...#...#.#...#.#.......#",
            "#.#.#.#####.#.#.###.#.###.#.#.#######.#.#####.#.###.#.#####.###############.#############.#.#####.#.###########.#.#.#.#.###.#.###.#.#######.#",
            "#.#.#.....#...#...#.#...#.#.#.#...#...#...#...#...#.#...#...#...#.....#.....#.............#.#.....#.....#.......#.#.#.#.#...#...#.#.#.......#",
            "#.#.#####.#######.#.###.#.#.#.#.#.#.#####.#.#####.#.###.#.###.#.#.###.#.#####.#############.#.#########.#.#######.#.#.#.#.#####.#.#.#.#######",
            "#...#...#.....#...#.###.#.#.#.#.#.#...#...#...#...#.#...#.###.#...###.#.#.....#...........#.#...#.......#.###.....#.#.#.#.....#.#.#.#.......#",
            "#####.#.#####.#.###.###.#.#.#v#.#.###.#.#####.#.###.#.###v###.#######.#.#.#####.#########.#.###.#.#######.###.#####.#.#.#####.#.#.#.#######.#",
            "#.....#.......#...#...#...#.>.>.#.....#.#...#.#.#...#.#.>.>...###...#...#.......#...#...#.#.#...#...#...#...#.....#.#.#.#...#.#.#.#.#.......#",
            "#.###############.###.#######v#########.#.#.#.#.#.###.#.#v#######.#.#############.#.#.#.#.#.#.#####.#.#.###.#####.#.#.#.#.#.#.#.#.#.#v#######",
            "#.......#.......#.....###...#.#...#...#.#.#...#.#...#...#.#...#...#.......#.......#.#.#...#.#.#...#...#...#.....#.#.#.#.#.#.#.#...#.>.#.....#",
            "#######.#.#####.#########.#.#.#.#.#.#.#.#.#####.###.#####.#.#.#.#########.#.#######.#.#####.#.#.#.#######.#####.#.#.#.#.#.#.#.#######v#.###.#",
            "#...###...#...#.....#.....#...#.#...#.#.#...#...#...#.....#.#...#.........#...#...#...###...#...#...#...#...###.#.#.#.#.#.#.#.#.....#...#...#",
            "#.#.#######.#.#####.#.#########.#####.#.###.#.###.###.#####.#####.###########.#.#.#######.#########.#.#.###.###.#.#.#.#.#.#.#.#.###.#####.###",
            "#.#.........#.......#.......#...#.....#.....#...#...#.......#...#...........#.#.#.....#...#.........#.#.###...#...#...#...#...#.#...#.....###",
            "#.#########################.#.###.#############.###.#########.#.###########.#.#.#####.#.###.#########.#.#####.#################.#.###.#######",
            "#...#...#...........#.....#.#.###.............#.....#.....#...#.............#...#.....#...#...#.......#.......###.....#.........#.....###...#",
            "###.#.#.#.#########.#.###.#.#.###############.#######.###.#.#####################.#######.###.#.#################.###.#.#################.#.#",
            "#...#.#...#.........#.#...#...#...#...........###...#...#.#...........#...###...#.......#...#.#...........#...#...#...#.............#...#.#.#",
            "#.###.#####.#########.#.#######.#.#.#############.#.###.#.###########.#.#.###.#.#######.###.#.###########.#.#.#.###.###############.#.#.#.#.#",
            "#...#.#.....#.....#...#.#...#...#.#.......###...#.#.#...#.#...........#.#...#.#.........###.#.#...........#.#...#...#...#.........#...#...#.#",
            "###.#.#.#####.###.#.###.#.#.#.###.#######.###.#.#.#.#.###.#.###########.###.#.#############.#.#.###########.#####.###.#.#.#######.#########.#",
            "###.#.#.....#...#.#.#...#.#.#...#.###...#...#.#.#.#.#.#...#.............#...#.....#.......#...#.........#...#.....###.#.#.......#...........#",
            "###.#.#####.###.#.#.#.###.#.###.#.###.#.###v#.#.#.#.#.#.#################.#######.#.#####.#############.#.###.#######.#.#######.#############",
            "###...#...#.#...#.#.#...#.#...#.#...#.#...>.>.#.#.#.#.#...###...#.........#...###...#.....#.....#.....#...###...#...#.#.#...#...#...........#",
            "#######.#.#.#.###.#.###.#.###.#.###.#.#########.#.#.#.###.###.#.#.#########.#.#######.#####.###.#.###.#########.#.#.#.#.#.#.#.###.#########.#",
            "#.......#...#.###...###.#.#...#...#.#...#.......#.#.#.#...#...#...#...#...#.#.###.....#...#...#.#.#...#...#####.#.#.#.#...#.#...#...#.......#",
            "#.###########.#########.#.#.#####.#.###.#.#######.#.#.#.###.#######.#.#.#.#.#.###v#####.#.###.#.#.#.###.#.#####v#.#.#.#####.###.###.#.#######",
            "#.#.....#...#.........#...#.#.....#...#.#.#...#...#.#.#...#...#.....#...#.#.#...>.>.#...#.#...#...#.#...#...#.>.>.#.#.#.....###.#...#.#...###",
            "#.#.###.#.#.#########.#####.#.#######.#.#.#.#.#.###.#.###.###.#.#########.#.#######.#.###.#.#######.#.#####.#.#####.#.#.#######v#.###.#.#.###",
            "#...###...#.#.....#...#.....#...#####...#.#.#.#...#...###...#...#.........#...###...#...#.#...###...#...#...#.#####...#...#...>.#...#.#.#...#",
            "###########.#.###.#.###.#######.#########.#.#.###.#########.#####.###########.###.#####.#.###.###.#####.#.###.###########.#.###v###.#.#.###.#",
            "###.........#...#.#.###.#.....#...#.......#.#...#.#.........#...#.#...#.....#...#.....#.#...#...#.#.....#...#...###.......#.#...###.#...#...#",
            "###.###########.#.#.###.#.###.###.#.#######.###.#.#.#########.#.#v#.#.#.###.###.#####.#.###.###.#.#.#######.###.###.#######.#.#####.#####.###",
            "#...#.....#...#.#.#.#...#...#...#.#...#...#.#...#.#.#...#...#.#.>.>.#.#.###...#.....#.#.###.#...#.#.......#.#...#...#.....#.#.....#.#.....###",
            "#.###.###.#.#.#.#.#.#.#####.###.#.###.#.#.#.#.###.#.#.#.#.#.#.#######.#.#####.#####.#.#.###.#.###.#######.#.#.###.###.###.#.#####.#.#.#######",
            "#.....###...#...#...#.......###...###...#...#.....#...#...#...#######...#####.......#...###...###.........#...###.....###...#####...#.......#",
            "###########################################################################################################################################.#",
    };

    decltype(input_real) input_test{
            "#.#####################",
            "#.......#########...###",
            "#######.#########.#.###",
            "###.....#.>.>.###.#.###",
            "###v#####.#v#.###.#.###",
            "###.>...#.#.#.....#...#",
            "###v###.#.#.#########.#",
            "###...#.#.#.......#...#",
            "#####.#.#.#######.#.###",
            "#.....#.#.#.......#...#",
            "#.#####.#.#.#########v#",
            "#.#...#...#...###...>.#",
            "#.#.#v#######v###.###v#",
            "#...#.>.#...>.>.#.###.#",
            "#####v#.#.###v#.#.###.#",
            "#.....#...#...#.#.#...#",
            "#.#########.###.#.#.###",
            "#...###...#...#...#.###",
            "###.###.#.###v#####v###",
            "#...#...#.#.>.>.#.>.###",
            "#.###.###.#.###.#.#v###",
            "#.....###...###...#...#",
            "#####################.#",
    };
//    auto &input = input_test;
    auto &input = input_real;

    struct Direction {
        char symbol;
        char opposite_symbol;
        ll inc_x;
        ll inc_y;

        std::tuple<ll, ll> getNextPos(ll x, ll y) const {
            return {x + inc_x, y + inc_y};
        }

        bool operator<(const Direction &other) const {
            return std::tie(symbol, inc_x, inc_y) < std::tie(other.symbol, other.inc_x, other.inc_y);
        }

    } LEFT{
            '<', '>', -1, 0
    }, RIGHT{
            '>', '<', 1, 0
    }, UP{
            '^', 'v', 0, -1
    }, DOWN{
            'v', '^', 0, 1
    };

    struct Vertex {
        ll id;
        ll x;
        ll y;
        std::set<Direction> directions;
        // connected vertex + distance
        // usage of std::set of pointers makes the search non-deterministic (hehe).
        std::set<std::tuple<Vertex *, ll>> connections;
        std::set<std::tuple<Vertex *, ll>> forbidden_connections;

        void print() const {
            std::cout << "{" << x << "," << y << "}" << std::endl;
            for (auto [vertex, distance]: connections) {
                std::cout << "\t+ " << distance << "{" << vertex->x << "," << vertex->y << "}" << std::endl;
            }
            for (auto [vertex, distance]: forbidden_connections) {
                std::cout << "\t- " << distance << "{" << vertex->x << "," << vertex->y << "}" << std::endl;
            }
        }
    };

    std::set<Direction> getAvailableDirections(ll x, ll y) {
        std::set < Direction > result;
        for (auto dir: {LEFT, RIGHT, UP, DOWN}) {
            auto [next_x, next_y] = dir.getNextPos(x, y);
            if (next_y < 0 || next_y >= input.size()) {
                continue;
            }
            if (next_x < 0 || next_x >= input.at(next_y).size()) {
                continue;
            }
            if (input.at(next_y).at(next_x) == '#') {
                continue;
            }
            result.insert(dir);
        }
        return result;
    }

    using MapT = std::map<std::tuple<ll, ll>, Vertex *>;

    MapT getAvailableVertexes() {
        ll VERTEX_ID = 0;
        std::map<std::tuple<ll, ll>, Vertex *> result;
        for (ll y = 0; y < input.size(); y++) {
            for (ll x = 0; x < input.at(y).size(); x++) {
                if (input.at(y).at(x) != '#') {
                    auto available_directions = getAvailableDirections(x, y);
                    if (available_directions.size() == 2 &&
                        ((available_directions.contains(LEFT) && available_directions.contains(RIGHT)) ||
                         (available_directions.contains(UP) && available_directions.contains(DOWN)))) {
                        continue;
                    }
                    Vertex *vertex = new Vertex();
                    vertex->id = VERTEX_ID;
                    vertex->x = x;
                    vertex->y = y;
                    vertex->directions = available_directions;
                    result[{x, y}] = vertex;
                    VERTEX_ID++;
                }
            }
        }

        return result;
    }

    void connectVertexes(MapT &map, bool
    ignore_slippery) {
        for (auto [start_pos, current_vertex]: map) {
            for (auto current_direction: current_vertex->directions) {
                auto [x, y] = start_pos;
                auto [next_x, next_y] = start_pos;
                bool found_opposite_slope = false;
                while (true) {
                    auto [maybe_next_x, maybe_next_y] = current_direction.getNextPos(next_x, next_y);
                    if (maybe_next_y < 0 || maybe_next_y >= input.size() || maybe_next_x < 0 ||
                        maybe_next_x >= input.at(maybe_next_y).size()) {
                        break;
                    }
                    const char c = input.at(maybe_next_y).at(maybe_next_x);
                    if (c == '#') {
                        break;
                    }
                    next_x = maybe_next_x;
                    next_y = maybe_next_y;
                    if (!ignore_slippery) {
                        found_opposite_slope |= (c == current_direction.opposite_symbol);
                    }
                    if (auto map_it = map.find({next_x, next_y}); map_it != map.end()) {
                        ll distance = llabs(next_y - y) + llabs(next_x - x);
                        if (found_opposite_slope) {
                            current_vertex->forbidden_connections.insert({map_it->second, distance});
                        } else {
                            current_vertex->connections.insert({map_it->second, distance});
                        }
// For the future me: the idea to connect the vertex to the
// all accessible other vertexes is bad!
// It makes the is-visited predicate error prone:
// if vertexes are on the same line, we'll walk the same path even if vertexes are not visited.
                        break;
                    }
                }
            }
        }
    }


    Vertex *getVertex(const MapT &map, ll expected_y) {
        auto it = std::find_if(map.begin(), map.end(), [expected_y](auto &key_value) {
            auto &[x, y] = std::get<0>(key_value);
            return y == expected_y;
        });
        assert(it != map.end());
        return it->second;
    }

// We cannot use utils because the graphs contains cycles (?).
// Surprisingly BFS doesn't take too long (~1 min for 3000 vertexes).
// There is a better algorithm for sure.
// Maybe https://stackoverflow.com/questions/2679081/how-do-find-the-longest-path-in-a-cyclic-graph-between-two-nodes
    ll getLongestPathBFS(Vertex *start, Vertex *finish) {
        struct Path {
            Vertex *last_vertex = nullptr;
            std::bitset<3000> visited_vertexes;
            ll distance = 0;

            inline void addVertex(Vertex *v) {
                last_vertex = v;
                visited_vertexes.set(v->id);
            }

            inline bool isVisited(Vertex *v) const { return visited_vertexes.test(v->id);; }
        };

        std::deque<Path> work_pool;
        Path initial;
        initial.addVertex(start);
        work_pool.push_front(initial);
        ll max_distance = INT64_MIN;
        while (!work_pool.empty()) {
            auto current_path = work_pool.front();
            work_pool.pop_front();

            for (auto [connection, distance]: current_path.last_vertex->connections) {
                if (current_path.isVisited(connection)) {
                    continue;
                }
                if (connection == finish) {
                    ll total_distance = current_path.distance + distance;
                    if (total_distance > max_distance) {
                        max_distance = total_distance;
                        std::cout << "New max " << max_distance << std::endl;
                    }
                    continue;
                }
                auto new_path = current_path;
                new_path.addVertex(connection);
                new_path.distance += distance;
                work_pool.push_front(std::move(new_path));
            }
        }
        return max_distance;
    }

}

int main23() {
    ASSERT_EQ(input.size(), input.at(0).size());
    {
        auto vertexes = getAvailableVertexes();
        myprint(vertexes.size());
        connectVertexes(vertexes, false);

        Graph g(vertexes.size());
        for (auto [pos, vertex_from]: vertexes) {
            for (auto [vertex_to, distance]: vertex_from->connections) {
                g.addEdge(vertex_from->id, vertex_to->id, distance);
            }
        }

        auto *start = getVertex(vertexes, 0);
        auto *finish = getVertex(vertexes, input.size() - 1);

        auto result0_3rdParty = g.longestPath(start->id, finish->id);
        auto result0_BFS = getLongestPathBFS(start, finish);
        myprint(result0_3rdParty);
        myprint(result0_BFS);
    }

    {
        auto vertexes = getAvailableVertexes();
        connectVertexes(vertexes, true);

        auto *start = getVertex(vertexes, 0);
        auto *finish = getVertex(vertexes, input.size() - 1);

        auto result1 = getLongestPathBFS(start, finish);
        myprint(result1);
    }
    return 0;
}

// 6470