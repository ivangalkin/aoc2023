#include <iostream>
#include <vector>
#include <array>
#include <set>
#include <iomanip>
#include <sstream>
#include <map>
#include <tuple>
#include <numeric>
#include <algorithm>

#ifdef NDEBUG
#undef NDEBUG
#endif

#include <assert.h>

#define ASSERT_EQ(a, b) \
   do { __typeof__ (a) _a = (a); \
       __typeof__ (b) _b = (b); \
     if (_a != _b)       \
     {                 \
       std::cout << _a << " != " << _b << std::endl; \
       assert(0);                  \
     }                  \
     }while(0)

#define myprint(arg) do { std::cout << "" #arg << " = " << arg << std::endl; } while(0)

using ll = int64_t;

namespace {

    std::vector<std::string> input_real{
            R"(\../....|.-........|.................|...\....../...............\...............|..................\........|.)",
            R"(.-...../.......-.......|./.........-.....-.......\...|.-...........-.......\.................-....-...........)",
            R"(.\....-\..|...\.....\...................................................................../................-..)",
            R"(.....|.............-.\....../......|.....\......................|...-.....-.........|.-......\................)",
            R"(........./............................-.|..|.........|.....|..................................................)",
            R"(................./.................|.................\...............\..................|.../.....././........)",
            R"(...-..|.........-.............\..|..-......./............\.-....|..|........\...-......\....../...\\..........)",
            R"(..............\..|............/..............|..........................................|............\........)",
            R"(.|...........................-.-.........-..\|...|.......|\............\|.....................................)",
            R"(..........-./.\.....|...................|./............./.-..............|........../.....-/..................)",
            R"(....../.....\/..........\.........|\...........|....--................/................../......-..........-..)",
            R"(-.|.......|...................../................\..................-\........-.....\.........................)",
            R"(...-|................................................\...........-.........\/.-......-.............|..........)",
            R"(.......\../....\..............|..........|.....\............|.............|......./................./....../\.)",
            R"(.....|..................|...|......-.....|..-....|\\.........\\........|....................|............-....)",
            R"(......./........./...-..-|................../...|....................|-.......\-............................./)",
            R"(................../......-...........|...|........./.....\..|......../..../.......|...|.................-.....)",
            R"(.................................../.|..........|...............\..........|...............-.............|/...)",
            R"(.......\.-......-................................/......|..\...\.........../........|......\.........-..-....\)",
            R"(....................|./.....-..../.............|...............-.../.\........-..-............/....|.......-..)",
            R"(...........\...........................\.|.................-...............|........-....................|..|.)",
            R"(..|.-.....\.......|................-.........../.............................................|....//.\........)",
            R"(..-...............\......../..||.....|.....\.|.........................\.....|....-.........../..../..........)",
            R"(..|......../.../.............|..........-...................-................\...\..\......-..................)",
            R"(...../...........-..../...|..\...././..\.|............\....................-|......../........................)",
            R"(/..|............-\..|.................../.../..................../...-........|...............-../......|-....)",
            R"(................/..............................................|.|......-...................|.................)",
            R"(....\..../.../.................\\............................................\........\................../..|.)",
            R"(../.-.............|......|.........\.........-\........../..........|.\.......................................)",
            R"(................./................./\......./........-.........................../........-..........|....\.\.)",
            R"(..\...../............/.............................................-.......--...|.................|...../...-.)",
            R"(..\......................-.......................-......-.\.-/../......./...........................-../......)",
            R"(...............-.................../................../.................-.........................|....\....|.)",
            R"(..../.\|..............-...../...|...../................\-....\..\........|....................-...............)",
            R"(.........................\...-...-|...................\....../........|...............-....../.../......./....)",
            R"(....\......../.-....-........-...../.....-.......-.\...............\.........\............./.....\-...|-..-|..)",
            R"(.../\................-....\.......|..-............-.\.............\..\........-............/......./......../.)",
            R"(..\.....|...............|..\......|..................................|......./.....\...|..|....\../......./...)",
            R"(......|.....././.....-..\..........................-\.............|..../.................................-/...)",
            R"(................|\.......|...|.|....................\..............\........................\.-...||..........)",
            R"(.-.......\...........-...../............/--....-..\-......................./...-.....|..........\/.....-......)",
            R"(...-............-.........\.....................|.........../.........../............|.-.|.....\.../...\-.....)",
            R"(.......................|...........\................./...................\............................|.......)",
            R"(......................|..|.\...............-.../................/.../.../...........................-.|.......)",
            R"(.\.|..........-.|................................../................................/.........-.\....\../.....)",
            R"(./............\..\............................|....../........\.........................\.......\..../.\.....-)",
            R"(....................../.....................|......./....../............................\....................|)",
            R"(..............................||....\........-..............................\..........\\........./.../.......)",
            R"(....\....../....................................-..-........................-................-....|.........\.)",
            R"(.......-......\.-\.|............................................/......-......../.......\.....................)",
            R"(....../...................|........-....-........./...........-.-........./....\..............................)",
            R"(..-/..............\............|........../....................\........-.\...................................)",
            R"(...-......\............/\...........\.........................-.......\.-./...................................)",
            R"(..........-.\.//......................--............\....../.........../-./...................................)",
            R"(.......\-.-..-.....\.............|............\....../........\......../...............-..............|....-..)",
            R"(........./.-.............\.........................-....|\..........|..../...-.........................\.\...\)",
            R"(.........|..\.|.........-...-........-./............|......|....................|.........../...|.............)",
            R"(................./....-..../\..............|../-................|.../..............-./|..-........||..........)",
            R"(...../.......-.............|.........-.....|.............................\........\.........\.................)",
            R"(.............|...../...................../.................\\.....................|\..........-....././......-)",
            R"(.............../..../..../....................../...\.......-..........................\\...-|.........../....)",
            R"(...........|........|........../..-........../......\...........-.......-.......-.......................-..|..)",
            R"(........................\...../.........-.........\.....|...|.........-.....-................-|.../...........)",
            R"(..-...............|...-...........\|.\.......\..............................\./......./..........-............)",
            R"(........................../....../....................................|................................../....)",
            R"(/.......\.................................\./............................|...\..............|...-............|)",
            R"(.....-.....................|.........|................-.\.....-..../..../...............-.........|...........)",
            R"(...|................\../..|.................|............/.....-......../.........-...\-.-.......\............)",
            R"(........................\....-..........|..-....../..............-..........-..|.........\.-...........\......)",
            R"(................................\\......./...................-...........|..................\....|...|../.....)",
            R"(......-.-.|...\.........|.........|....\......................................................................)",
            R"(...................-/....\......../...........|................/......|.-........\|./..|......../.....|..\....)",
            R"(....../........-...\../../..........|...\.....\.............................../......-........-...............)",
            R"(............\...-....|...................\............-.............|..-......|..../-.........................)",
            R"(...........././.-......./............../.....\...-..-.-|.....\../............-..|..|..................--..././)",
            R"(...................-......-...././............./.......\\...../|.................\..............\..|..........)",
            R"(.|.|.../..\|..-../........................................................-...................................)",
            R"(...............-...../.....|...|....\........|......|.............\..........................-...\............)",
            R"(..\.......................-..............\..-...........-...............\.\-....-.............................)",
            R"(..............-............/..-.......|....-/............../........|............../......|..................-)",
            R"(.......|..........|..-..../...................................|-......-..\......./........................\...)",
            R"(.........................................-......./..........|.....\../.../......|./.........................\\)",
            R"(...-.-.........../......./.-........//..|...................|.........-..........|........................-...)",
            R"(........./...../.........\.......\..............-........../-./..|.\...............|....................../...)",
            R"(........-.......\\.........-...\..//...-.........\\....../.-................\.......\...\............/...\....)",
            R"(................-...|......-.....-..|...../....../...-./.............-...........................-|...........)",
            R"(....-..-...........|.................../..\.....|......|...............-.-.|.........../.........../..|....../)",
            R"(....\......................................\................../..|...........-.\.....\.........||...........|.)",
            R"(.........................\.................-...............\.....\.-......................\.......-\.-........)",
            R"(...............-..\................\.................../.............-...................................../..)",
            R"(..-|../.-..|....\............-.......\.../....../...-...../|.........\..\..-..../.-..\....|........\..........)",
            R"(.........................../............|....................-......................................|.........)",
            R"(...../...........|.../........./............./......../.........-.............|..............-.......-|..-...|)",
            R"(..\/......./.\................/.......-............\..\............................................\..........)",
            R"(.......\.\.\......../|......\....................|..\..........-............./.........-...\....|../\......|..)",
            R"(...........\......././.........\......../...............................|........./...|.......................)",
            R"(............|.......|......./.............-..-.........\.....\....................../................./.......)",
            R"(...................................................../...../...............\........-.........................)",
            R"(.|...............-.............-........................|...............................-..|................/.)",
            R"(..............\....../../...........-.-..\........../...........-.....-......................|..../..|.|......)",
            R"(...................../...-.-........................../.........................|.....\.......................)",
            R"(.........\............\..............|.....//........-..\.../..................-.......//..........|......|..\)",
            R"(...../\.........\.......|....|....\...|..........\..............//........-..-.......-............-.-./.......)",
            R"(.........|.........................\...............................|/..........\..\...-..|..................\.)",
            R"(........................\..........|........./..-......\..../..|............\......./......................./|)",
            R"(................\.-...................|.......|/.-|....-.-.../......-.-...-.......-.........../.....-..|......)",
            R"(..........-.\......-.-....-............\..-.......\....-.../\..................|............/...|..../.....-..)",
            R"(|.....................|..\...................||............\...\......./........................-.....|..../..)",
            R"(.|..../.......|..........................................................|....../.....|.....|.....-...........)",
            R"(.......................|..-..\../.....|.........\.................-...........................................)",
    };

    decltype(input_real) input_test{
            R"(.|...\....)",
            R"(|.-.\.....)",
            R"(.....|-...)",
            R"(........|.)",
            R"(..........)",
            R"(.........\)",
            R"(..../.\\..)",
            R"(.-.-/..|..)",
            R"(.|....-|.\)",
            R"(..//.|....)",
    };
//    auto &input = input_test;
    auto &input = input_real;

    // Simulation of the physics is borrowed from year 2018 day 13.
    // By chance I solved it as a warm-up a day before.
    // In this solution a term "cart" is used for a beam.

    enum class Orientation {
        forward = '>', backward = '<', up = '^', down = 'v'
    };

    struct Cart {
        std::tuple<ll, ll> current_pos;
        Orientation orientation;
        bool erase_me = false;

        std::tuple<ll, ll> getNextPosition() {
            auto [x, y] = current_pos;
            switch (orientation) {
                case Orientation::forward:
                    return {x + 1, y};
                case Orientation::backward:
                    return {x - 1, y};
                case Orientation::up:
                    return {x, y - 1};
                case Orientation::down:
                    return {x, y + 1};
            }
        }

        std::vector<Orientation> processNextTile(char tile) {
            switch (orientation) {
                case Orientation::forward:
                    switch (tile) {
                        case '.':
                            return {Orientation::forward};
                        case '\\':
                            return {Orientation::down};
                        case '/':
                            return {Orientation::up};
                        case '-':
                            return {Orientation::forward};
                        case '|':
                            return {Orientation::up, Orientation::down};
                        default:
                            assert(false && "Unacceptable tile for >");
                    }
                case Orientation::backward:
                    switch (tile) {
                        case '.':
                            return {Orientation::backward};
                        case '\\':
                            return {Orientation::up};
                        case '/':
                            return {Orientation::down};
                        case '-':
                            return {Orientation::backward};
                        case '|':
                            return {Orientation::up, Orientation::down};
                        default:
                            assert(false && "Unacceptable tile for <");
                    }
                case Orientation::up:
                    switch (tile) {
                        case '.':
                            return {Orientation::up};
                        case '\\':
                            return {Orientation::backward};
                        case '/':
                            return {Orientation::forward};
                        case '-':
                            return {Orientation::backward, Orientation::forward};
                        case '|':
                            return {Orientation::up};
                        default:
                            assert(false && "Unacceptable tile for ^");
                    }
                case Orientation::down:
                    switch (tile) {
                        case '.':
                            return {Orientation::down};
                        case '\\':
                            return {Orientation::forward};
                        case '/':
                            return {Orientation::backward};
                        case '-':
                            return {Orientation::backward, Orientation::forward};
                        case '|':
                            return {Orientation::down};
                        default:
                            assert(false && "Unacceptable tile for v");
                    }
            }
        }
    };

    ll get_visited(std::vector<Cart> carts) {
        std::set<std::tuple<ll, ll>> visited;
        std::set<std::tuple<ll, ll, ll>> visited_by_orientation;
        auto current_map = input;
        while (!carts.empty()) {
            std::vector<Cart> new_carts;
            for (auto &cart: carts) {
                auto [next_x, next_y] = cart.getNextPosition();
                if (next_y >= current_map.size() || next_y < 0 || next_x >= current_map.at(next_y).size() ||
                    next_x < 0) {
                    cart.erase_me = true;
                    continue;
                }

                visited.insert({next_x, next_y});
                auto [it, inserted] = visited_by_orientation.insert({next_x, next_y, ll(cart.orientation)});
                if (!inserted) {
                    cart.erase_me = true;
                    continue;
                }

                auto c = current_map.at(next_y).at(next_x);
                auto next_orientations = cart.processNextTile(c);

                cart.orientation = next_orientations.front();
                cart.current_pos = {next_x, next_y};

                if (next_orientations.size() == 2) {
                    Cart new_cart;
                    new_cart.current_pos = {next_x, next_y};
                    new_cart.orientation = next_orientations.back();
                    new_carts.push_back(new_cart);
                }
            }

            for (auto it = carts.begin(); it != carts.end();) {
                if (it->erase_me) {
                    it = carts.erase(it);
                } else {
                    ++it;
                }
            }
            carts.insert(carts.end(), new_carts.begin(), new_carts.end());
        }
        return visited.size();
    }

}

int main16() {
    {
        std::vector<Cart> carts;
        Cart cart;
        cart.current_pos = {-1, 0};
        cart.orientation = Orientation::forward;
        carts.push_back(cart);
        ll result0 = get_visited(carts);
        myprint(result0);
        ASSERT_EQ(result0, 7236);
    }

    {
        ll max = INT64_MIN;

        for (ll x = 0; x < input.at(0).size(); x++) {
            std::vector<Cart> carts;
            Cart cart;
            cart.current_pos = {x, -1};
            cart.orientation = Orientation::down;
            carts.push_back(cart);
            ll result = get_visited(carts);
            max = std::max(max, result);
        }
        for (ll x = 0; x < input.at(0).size(); x++) {
            std::vector<Cart> carts;
            Cart cart;
            cart.current_pos = {x, input.size()};
            cart.orientation = Orientation::up;
            carts.push_back(cart);
            ll result = get_visited(carts);
            max = std::max(max, result);
        }
        for (ll y = 0; y < input.size(); y++) {
            std::vector<Cart> carts;
            Cart cart;
            cart.current_pos = {-1, y};
            cart.orientation = Orientation::forward;
            carts.push_back(cart);
            ll result = get_visited(carts);
            max = std::max(max, result);
        }
        for (ll y = 0; y < input.size(); y++) {
            std::vector<Cart> carts;
            Cart cart;
            cart.current_pos = {input.at(y).size(), y};
            cart.orientation = Orientation::backward;
            carts.push_back(cart);
            ll result = get_visited(carts);
            max = std::max(max, result);
        }
        myprint(max);
        ASSERT_EQ(max, 7521);
    }

    return 0;
}
