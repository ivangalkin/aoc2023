#include <iostream>
#include <vector>
#include <array>
#include <set>
#include <iomanip>
#include <sstream>
#include <map>
#include <tuple>
#include <numeric>
#include <algorithm>

#ifdef NDEBUG
#undef NDEBUG
#endif

#include <assert.h>

#define ASSERT_EQ(a, b) \
   do { __typeof__ (a) _a = (a); \
       __typeof__ (b) _b = (b); \
     if (_a != _b)       \
     {                 \
       std::cout << _a << " != " << _b << std::endl; \
       assert(0);                  \
     }                  \
     }while(0)

#define myprint(arg) do { std::cout << "" #arg << " = " << arg << std::endl; } while(0)

using ll = int64_t;

namespace {

    const std::map<std::string, std::vector<std::string>> input_real{
            {"fxg", {"x<2288:tn",  "m<3059:mlg", "xl"}},
            {"fdl", {"m>3467:A",   "s<1414:A",   "s>2068:A",   "A"}},
            {"fzv", {"m<82:R",     "m>134:A",    "s>1033:R",   "A"}},
            {"fmd", {"a>3959:A",   "R"}},
            {"xx",  {"s>1478:shz", "s>972:tfm",  "a>3810:jvb", "lfb"}},
            {"cjj", {"m<2288:R",   "a>3822:A",   "A"}},
            {"qht", {"a<2481:vk",  "m>987:thk",  "s>2051:xkl", "mz"}},
            {"ds",  {"a>2589:A",   "R"}},
            {"ts",  {"s<1928:A",   "A"}},
            {"cb",  {"s<3311:R",   "s<3404:R",   "R"}},
            {"qcm", {"s>838:A",    "R"}},
            {"xxz", {"m>2772:dpn", "A"}},
            {"zbx", {"s<2149:R",   "m>1885:R",   "s<3157:A",   "R"}},
            {"mdq", {"m>2002:sg",  "a>3908:gz",  "m<1702:np",  "gxm"}},
            {"rlm", {"m<2733:R",   "m>2925:lhf", "s<2207:msh", "gjh"}},
            {"zlx", {"m>2987:R",   "s>1645:R",   "R"}},
            {"ngc", {"m<3821:A",   "A"}},
            {"mjq", {"s>1671:A",   "s<1484:A",   "A"}},
            {"bk",  {"a<3273:A",   "m>3695:pkb", "m<3584:R",   "dzk"}},
            {"mvc", {"m>3223:R",   "A"}},
            {"xl",  {"s>677:A",    "m>3381:A",   "A"}},
            {"pm",  {"s>2238:srn", "dxg"}},
            {"szv", {"a<1654:krs", "a<3133:fnm", "m<3024:gpl", "lh"}},
            {"tdp", {"m<3483:mnh", "a<3418:xrv", "sf"}},
            {"kgk", {"x<1234:fbd", "pjk"}},
            {"xkl", {"a>2755:kd",  "x>1913:vv",  "R"}},
            {"jx",  {"a>3102:rzg", "gsm"}},
            {"pz",  {"x<1357:R",   "s<338:R",    "R"}},
            {"ztx", {"m>3558:kfs", "s<1441:chq", "x>2307:A",   "A"}},
            {"jp",  {"m<1022:R",   "a<401:hrk",  "x<2481:A",   "lfr"}},
            {"nbp", {"x>3585:A",   "A"}},
            {"lqv", {"x<1820:A",   "A"}},
            {"hbd", {"a<387:hgd",  "nt"}},
            {"hh",  {"s<760:R",    "s>1049:A",   "A"}},
            {"hbv", {"s>2416:A",   "m<1490:A",   "m<1526:R",   "R"}},
            {"fq",  {"s<490:R",    "R"}},
            {"kql", {"s>1995:A",   "a<3405:R",   "A"}},
            {"bhl", {"s>3286:dzj", "m<3238:csn", "vn"}},
            {"nfs", {"m>454:A",    "x>2121:R",   "A"}},
            {"vvd", {"m<45:A",     "s>2313:rr",  "m>86:A",     "vdx"}},
            {"msm", {"m>410:hfx",  "m>213:qdk",  "a<3545:bd",  "xp"}},
            {"zpt", {"s<393:fj",   "a<3968:R",   "x<989:R",    "vgm"}},
            {"qc",  {"x<1556:A",   "R"}},
            {"tm",  {"a>3874:R",   "s<3072:A",   "s<3430:A",   "A"}},
            {"hxg", {"a>459:A",    "m<3846:A",   "A"}},
            {"vrh", {"s>513:fxg",  "m>3140:mhj", "a<2061:bv",  "zk"}},
            {"pn",  {"x>221:R",    "m>2805:A",   "R"}},
            {"pb",  {"x>2748:R",   "x>2190:A",   "m>343:R",    "ln"}},
            {"zn",  {"x>2133:xm",  "x<813:tb",   "s>252:pz",   "R"}},
            {"jls", {"x<2268:A",   "m<422:R",    "a<2257:R",   "A"}},
            {"pl",  {"s>2588:A",   "s<975:smm",  "jlr"}},
            {"kt",  {"s<2491:R",   "s<2547:A",   "x<2548:A",   "A"}},
            {"xrv", {"s>1456:bk",  "fq"}},
            {"cs",  {"x<1649:R",   "A"}},
            {"hq",  {"m>3164:rv",  "x>594:R",    "sjl"}},
            {"qvr", {"s>457:R",    "a<1922:R",   "R"}},
            {"cz",  {"m>2163:R",   "m<1830:lqv", "tbg"}},
            {"mnm", {"x<2059:R",   "A"}},
            {"msh", {"a>3672:A",   "x>2294:R",   "A"}},
            {"jh",  {"a>447:A",    "m>3125:R",   "R"}},
            {"btl", {"s<1969:rmb", "A"}},
            {"nxj", {"a>1150:R",   "x<1570:A",   "A"}},
            {"hcc", {"s>3619:R",   "m<3681:A",   "s<3546:R",   "A"}},
            {"jnt", {"s>3000:ksn", "a>3744:A",   "xlp"}},
            {"ck",  {"m>3636:hxg", "a>265:R",    "a>134:R",    "mt"}},
            {"kr",  {"s>591:R",    "s<285:gj",   "x<1120:R",   "mnm"}},
            {"jtl", {"m<2676:ljt", "a>3746:R",   "pn"}},
            {"tdj", {"x<3002:R",   "R"}},
            {"pf",  {"s<3426:qjt", "s>3624:nsl", "xjk"}},
            {"pj",  {"s>1859:R",   "R"}},
            {"xz",  {"s>2322:pf",  "m>2095:pvb", "ss"}},
            {"bl",  {"x>1072:R",   "vrf"}},
            {"hrk", {"a>204:R",    "R"}},
            {"vv",  {"s>2378:A",   "A"}},
            {"px",  {"a<3676:R",   "R"}},
            {"cth", {"s>1089:R",   "x<1723:A",   "A"}},
            {"vd",  {"s>670:A",    "m<2596:A",   "x>1199:R",   "A"}},
            {"hvb", {"x>1121:A",   "x<581:znp",  "A"}},
            {"gn",  {"m<920:gml",  "x<2325:kgk", "rlx"}},
            {"csn", {"x>893:R",    "s<2824:mnv", "qn"}},
            {"scs", {"m<3673:R",   "x<1134:A",   "a<3671:A",   "A"}},
            {"ss",  {"s<1302:zfx", "x>815:hf",   "btl"}},
            {"sjl", {"x>263:R",    "A"}},
            {"tfm", {"a<3703:A",   "s<1173:R",   "dxt"}},
            {"hfx", {"s>1106:A",   "s<547:bx",   "dj"}},
            {"qt",  {"a>3806:xlm", "s>1595:bj",  "a<3717:xs",  "mmf"}},
            {"mlg", {"x>3146:R",   "s>721:A",    "A"}},
            {"gkm", {"a>660:R",    "A"}},
            {"txg", {"s>810:R",    "m<3165:R",   "a<3430:R",   "R"}},
            {"pvb", {"s<1031:qql", "a>3301:jln", "vf"}},
            {"fxb", {"a<3859:pkq", "mdq"}},
            {"ljt", {"x>237:A",    "a>3840:R",   "R"}},
            {"jcm", {"x>3322:A",   "A"}},
            {"mqs", {"a<3643:pqp", "a<3769:tbm", "s<2584:fxb", "tbs"}},
            {"lxk", {"a>2753:qdm", "a>2621:tlp", "cq"}},
            {"tbg", {"m<1957:A",   "m>2053:R",   "m>1999:R",   "R"}},
            {"gdk", {"s<1637:A",   "A"}},
            {"bv",  {"s<197:xjx",  "a>1986:zp",  "R"}},
            {"xnj", {"m<3359:R",   "m>3463:R",   "m<3428:R",   "A"}},
            {"gv",  {"s>1869:zqk", "txp"}},
            {"jln", {"x>679:gp",   "s<1624:R",   "s<2011:crb", "xqx"}},
            {"ft",  {"s<1931:A",   "m>277:A",    "A"}},
            {"fxr", {"m<2870:cgn", "x>961:vm",   "m<3322:R",   "A"}},
            {"jrb", {"s<3400:R",   "x>1684:R",   "x>1454:R",   "A"}},
            {"dsd", {"a>3907:A",   "mf"}},
            {"rp",  {"s>3309:R",   "x<1004:A",   "jbs"}},
            {"jlr", {"x>3494:A",   "m<3218:A",   "R"}},
            {"lhd", {"x<814:R",    "x<1071:R",   "R"}},
            {"thl", {"a<3885:R",   "s<3770:A",   "R"}},
            {"qp",  {"a<1700:A",   "m<1132:R",   "s<962:A",    "A"}},
            {"xmg", {"m>3765:kb",  "s>2035:msf", "s<1048:fx",  "lj"}},
            {"sg",  {"x>2270:A",   "R"}},
            {"vtr", {"s>473:A",    "x>460:R",    "R"}},
            {"zk",  {"a<2113:bhg", "m<2164:A",   "R"}},
            {"gml", {"a<2183:jz",  "x>2629:fh",  "a>2379:kr",  "vl"}},
            {"phl", {"a>1213:xnk", "x>2508:lq",  "dsp"}},
            {"grr", {"a>3924:zvv", "a<3874:bmb", "xv"}},
            {"mz",  {"s>1916:A",   "m<924:dtb",  "a<2668:A",   "zv"}},
            {"dr",  {"a>830:R",    "m>2354:R",   "lr"}},
            {"mmp", {"m>3723:zqr", "m<3706:R",   "s<580:R",    "A"}},
            {"srn", {"m>1115:A",   "s>2393:R",   "A"}},
            {"mhj", {"x>2438:A",   "dl"}},
            {"mq",  {"m<204:lc",   "x>1107:cc",  "A"}},
            {"tbs", {"s>3146:mjl", "dsd"}},
            {"mmf", {"x>1280:R",   "s<937:R",    "A"}},
            {"ksn", {"a>3701:R",   "m>3252:A",   "R"}},
            {"spn", {"x>1838:R",   "x<1168:dzc", "s>1037:A",   "qc"}},
            {"vbf", {"a<3249:R",   "s<2020:R",   "R"}},
            {"gt",  {"s<2374:A",   "s<2461:A",   "R"}},
            {"lg",  {"m>867:A",    "x<1356:R",   "s>3363:R",   "R"}},
            {"hr",  {"a>3739:A",   "x>339:R",    "R"}},
            {"fh",  {"a<2473:A",   "a>2541:A",   "x>3430:cr",  "A"}},
            {"tk",  {"m>2064:R",   "m<1828:R",   "A"}},
            {"mmc", {"s<3055:R",   "R"}},
            {"flh", {"s>2954:A",   "x>3012:A",   "x<2516:R",   "A"}},
            {"stn", {"s>1855:zl",  "a<3682:A",   "tk"}},
            {"lt",  {"a<2953:sm",  "m>140:tdj",  "kql"}},
            {"pjh", {"s<3223:R",   "s>3319:R",   "x<1248:A",   "R"}},
            {"cd",  {"m<3499:pl",  "gb"}},
            {"zfx", {"x<859:vtr",  "x<1065:R",   "lqm"}},
            {"kbx", {"x>2196:tst", "ctc"}},
            {"ktq", {"s<1368:A",   "R"}},
            {"spg", {"a<2022:A",   "m<2383:R",   "x<852:kxh",  "A"}},
            {"kb",  {"a>3815:grr", "s>2167:rp",  "hbm"}},
            {"vnh", {"x>2559:qvh", "rb"}},
            {"xk",  {"s<973:A",    "s>1418:R",   "A"}},
            {"zz",  {"m<3797:pbt", "R"}},
            {"nrs", {"m<2763:R",   "a>2242:R",   "s>2010:A",   "A"}},
            {"xqr", {"a<1948:bts", "s>995:fpx",  "vrh"}},
            {"tb",  {"s<238:R",    "R"}},
            {"qdx", {"x<582:csj",  "xx"}},
            {"vts", {"a<3055:R",   "a>3208:A",   "a<3112:A",   "A"}},
            {"fbd", {"a<1902:qp",  "nn"}},
            {"smm", {"a<3598:A",   "x>3526:R",   "m<3214:R",   "R"}},
            {"xs",  {"s<1042:R",   "a>3659:A",   "A"}},
            {"zc",  {"a>2724:R",   "m<951:R",    "x>2100:R",   "R"}},
            {"csj", {"m<2472:tq",  "s<2587:jtl", "a>3749:fd",  "bbd"}},
            {"rq",  {"m>3626:A",   "a>2389:A",   "R"}},
            {"ckk", {"s<721:qvr",  "a>2023:R",   "x>3096:R",   "A"}},
            {"znp", {"x<195:R",    "x>385:A",    "a>3930:A",   "R"}},
            {"hz",  {"m<565:A",    "a>732:A",    "m>770:A",    "R"}},
            {"zv",  {"x>1524:R",   "x>740:A",    "s>1835:R",   "R"}},
            {"zp",  {"x<2081:R",   "A"}},
            {"qgf", {"s<801:A",    "a<3653:A",   "s>1342:A",   "R"}},
            {"tp",  {"a>3371:zrk", "R"}},
            {"gm",  {"a>937:mmc",  "x<833:fp",   "jh"}},
            {"msf", {"s<2813:hnx", "m<3701:jj",  "s<3492:ls",  "xt"}},
            {"dxt", {"x>924:A",    "m<2200:A",   "A"}},
            {"gpl", {"x>1337:mqs", "a<3544:xz",  "qdx"}},
            {"kjr", {"x<2252:A",   "m<2340:R",   "R"}},
            {"xqx", {"x>414:A",    "m<2609:R",   "s<2216:A",   "A"}},
            {"fn",  {"x<1666:tzd", "m<1371:pq",  "ph"}},
            {"lqm", {"a>3330:A",   "m>1880:R",   "x<1195:R",   "A"}},
            {"ssj", {"m>1131:cxm", "m<992:A",    "x>2550:txx", "R"}},
            {"gxm", {"a<3878:A",   "s<1216:A",   "A"}},
            {"pgk", {"x>1554:R",   "m>2073:A",   "m>1777:A",   "A"}},
            {"cf",  {"s>3103:A",   "R"}},
            {"bnq", {"m<2544:R",   "m<3510:R",   "R"}},
            {"sx",  {"s<1453:dnl", "m<1270:clq", "zd"}},
            {"nc",  {"m>1030:A",   "a>3768:R",   "R"}},
            {"flx", {"x<2558:A",   "m<1299:R",   "A"}},
            {"rh",  {"m<1142:rcq", "a>3251:qpc", "x<1463:rd",  "A"}},
            {"vm",  {"a>1836:R",   "s>1532:R",   "R"}},
            {"qfc", {"x>1563:A",   "x>1412:R",   "A"}},
            {"pkb", {"a>3343:A",   "R"}},
            {"qn",  {"m<3164:A",   "x<359:A",    "m<3195:A",   "A"}},
            {"hpk", {"a<3860:A",   "m>2285:A",   "x<982:A",    "A"}},
            {"vdx", {"s>2213:A",   "s>2184:A",   "x>2983:R",   "A"}},
            {"nkm", {"m<3672:A",   "a<3571:R",   "m<3811:A",   "A"}},
            {"rx",  {"x<2190:fxx", "dx"}},
            {"hgd", {"m<981:A",    "A"}},
            {"szs", {"m<2528:fv",  "m>3232:pj",  "zlx"}},
            {"vz",  {"x>1069:R",   "x<426:R",    "zg"}},
            {"vk",  {"m<1038:A",   "shc"}},
            {"kk",  {"m>2465:R",   "s>2032:R",   "A"}},
            {"rk",  {"s<3088:kmf", "x<2955:pqk", "s<3479:th",  "zb"}},
            {"pkq", {"s<1716:cjj", "s>2162:A",   "s<1905:vc",  "R"}},
            {"bsx", {"x<370:R",    "m>2899:R",   "A"}},
            {"qpm", {"s>3450:pp",  "bl"}},
            {"pp",  {"x<955:mh",   "x>1395:R",   "R"}},
            {"tst", {"x>2877:bnq", "R"}},
            {"dhm", {"m<3479:xsg", "mv"}},
            {"fpx", {"x<1855:spg", "szs"}},
            {"mdh", {"a>3390:A",   "m<2131:A",   "s<3506:A",   "R"}},
            {"phj", {"a>2554:lxk", "s<2157:nj",  "s>3251:kbx", "vnh"}},
            {"hn",  {"x>557:R",    "m<152:A",    "A"}},
            {"fnm", {"a>2161:phj", "s<2559:xqr", "vs"}},
            {"xzp", {"a>3400:A",   "a<3357:A",   "R"}},
            {"dm",  {"x>971:A",    "s<1707:A",   "s>1743:R",   "A"}},
            {"fmt", {"x>3561:A",   "A"}},
            {"tc",  {"m<3759:R",   "m<3761:R",   "A"}},
            {"zcq", {"s>953:gl",   "A"}},
            {"qvh", {"m>3005:rq",  "a>2368:skg", "qq"}},
            {"xbg", {"a<2362:rkm", "a<2427:A",   "A"}},
            {"bgs", {"s>3730:A",   "x>2093:A",   "A"}},
            {"vt",  {"m<287:R",    "R"}},
            {"vzs", {"x>2122:mdc", "R"}},
            {"dt",  {"a<322:A",    "a<494:R",    "A"}},
            {"kcd", {"m<2490:R",   "R"}},
            {"bhg", {"a<2083:A",   "x>2127:R",   "A"}},
            {"lc",  {"x>1216:A",   "A"}},
            {"lz",  {"x>2398:A",   "m>1162:R",   "R"}},
            {"mnh", {"m>3327:vz",  "x>1160:vtx", "hq"}},
            {"htm", {"x>2296:zkf", "s>2077:jth", "hnc"}},
            {"tn",  {"a<2020:R",   "R"}},
            {"jzm", {"x>3227:A",   "R"}},
            {"tj",  {"a>3813:A",   "A"}},
            {"fp",  {"m>3076:A",   "a>493:R",    "m>2934:A",   "R"}},
            {"rts", {"a<3848:nc",  "m<1013:bs",  "m<1078:tpk", "lvh"}},
            {"kl",  {"m>767:R",    "s<2165:R",   "s<2258:R",   "A"}},
            {"xr",  {"x>1462:pb",  "x>820:mq",   "fdr"}},
            {"sm",  {"x>3094:A",   "A"}},
            {"lr",  {"m>1863:A",   "R"}},
            {"dzj", {"x>1287:qfc", "s<3612:lhd", "thl"}},
            {"bd",  {"m>83:cth",   "s<970:jfs",  "db"}},
            {"fdr", {"a<520:qd",   "s<892:A",    "R"}},
            {"kfs", {"s>1567:R",   "a>3288:R",   "A"}},
            {"gl",  {"s>1251:R",   "m>949:R",    "R"}},
            {"gx",  {"a>3225:A",   "x>524:A",    "m>2467:R",   "A"}},
            {"bs",  {"x<1767:R",   "m>949:R",    "s>2069:R",   "R"}},
            {"gmn", {"m>3647:R",   "a>3720:A",   "s<2882:R",   "R"}},
            {"nh",  {"m>538:A",    "A"}},
            {"nv",  {"m<3608:dt",  "m>3822:rhv", "a<376:jtn",  "R"}},
            {"xnk", {"a>1282:zhs", "m>1091:flx", "lg"}},
            {"sl",  {"x<943:hr",   "x<1538:hs",  "R"}},
            {"pbz", {"s>2319:rct", "a>750:R",    "kl"}},
            {"xjx", {"x>1490:R",   "x>948:R",    "x<374:R",    "R"}},
            {"hf",  {"s>1961:A",   "mjq"}},
            {"fr",  {"x<2009:pbz", "m<909:zjk",  "a<1227:tt",  "pm"}},
            {"qpc", {"x>1774:R",   "x<1034:A",   "A"}},
            {"nx",  {"s>3695:A",   "a<458:R",    "A"}},
            {"xlp", {"s>2692:R",   "x>1500:R",   "a<3692:A",   "A"}},
            {"vrf", {"a>1813:A",   "x<675:A",    "m>2397:A",   "R"}},
            {"fx",  {"a<3858:dq",  "m<3684:hvb", "a>3947:zpt", "mmp"}},
            {"dvz", {"s<2448:R",   "x<1803:nkm", "a>3561:hfg", "A"}},
            {"nt",  {"s<3265:R",   "s>3609:R",   "A"}},
            {"lk",  {"x>1092:R",   "A"}},
            {"gb",  {"m<3766:px",  "jcm"}},
            {"tzd", {"x>643:R",    "m>1402:R",   "A"}},
            {"gj",  {"s<181:R",    "s>242:A",    "R"}},
            {"lst", {"x>2139:hbd", "x<1078:npf", "lpq"}},
            {"kf",  {"s<1698:tf",  "ftj"}},
            {"fd",  {"x<225:A",    "x<444:R",    "tm"}},
            {"gp",  {"x<944:A",    "x<1151:A",   "A"}},
            {"djs", {"x<1630:A",   "s<1045:A",   "A"}},
            {"vc",  {"m<2251:R",   "m>2675:A",   "s<1784:A",   "R"}},
            {"mcv", {"x<1158:R",   "A"}},
            {"sr",  {"s>637:R",    "A"}},
            {"xp",  {"a<3809:qgf", "a>3876:cs",  "fzv"}},
            {"zq",  {"a<2371:R",   "R"}},
            {"sn",  {"a<574:R",    "s<3238:A",   "s>3608:A",   "R"}},
            {"prx", {"s>3406:R",   "A"}},
            {"gsm", {"a<2825:zc",  "s<779:xb",   "m<880:A",    "bm"}},
            {"qns", {"a>3713:R",   "A"}},
            {"jth", {"m<3374:gm",  "a>776:nxg",  "x<1068:nv",  "ck"}},
            {"qqn", {"s>2266:lqh", "jf"}},
            {"nsl", {"s>3816:A",   "a<3396:A",   "R"}},
            {"tt",  {"x>3233:nbp", "A"}},
            {"jbs", {"x<1614:A",   "A"}},
            {"xj",  {"s>2368:R",   "a>2424:R",   "s>2314:R",   "A"}},
            {"xv",  {"s<1349:A",   "R"}},
            {"qqf", {"x>1015:jnt", "qmk"}},
            {"ztb", {"x<772:R",    "A"}},
            {"qnr", {"m<3763:A",   "m<3892:R",   "R"}},
            {"nn",  {"s>775:A",    "x<470:R",    "R"}},
            {"bbd", {"m<2836:R",   "bsx"}},
            {"nj",  {"s<1347:xbg", "a<2328:bcz", "cx"}},
            {"lrg", {"a>3925:R",   "A"}},
            {"jd",  {"x<3255:R",   "a>1048:A",   "a<984:A",    "A"}},
            {"qql", {"x<857:A",    "R"}},
            {"hfg", {"a>3587:R",   "s>3271:R",   "R"}},
            {"spc", {"a>3762:R",   "a<3682:R",   "s>1915:A",   "A"}},
            {"skg", {"s>2718:A",   "m<2395:A",   "s>2452:A",   "A"}},
            {"mzg", {"s>258:R",    "x<1217:R",   "A"}},
            {"bx",  {"m<551:A",    "R"}},
            {"lfb", {"x<1060:R",   "s<416:mzg",  "m<2306:sr",  "vd"}},
            {"pv",  {"a<3182:R",   "m<600:R",    "R"}},
            {"fv",  {"a>2031:A",   "a<1998:R",   "x<3117:R",   "R"}},
            {"lqb", {"x<937:A",    "a<2879:R",   "m>152:A",    "A"}},
            {"shz", {"a>3752:hpk", "a<3647:R",   "A"}},
            {"cxc", {"a<1094:R",   "a<1220:A",   "R"}},
            {"th",  {"m>2853:R",   "a>1789:cb",  "hgq"}},
            {"thk", {"m<1092:A",   "a>2706:vq",  "A"}},
            {"fj",  {"x<730:A",    "s>180:R",    "m<3718:A",   "R"}},
            {"gjh", {"s<3014:R",   "A"}},
            {"bts", {"x>1336:dv",  "x<614:fpm",  "fxr"}},
            {"bpc", {"m>2876:frp", "cz"}},
            {"fxx", {"x>1291:sv",  "a>821:cxc",  "jg"}},
            {"kdt", {"x>1408:A",   "x<526:A",    "a>2495:A",   "R"}},
            {"xnx", {"s<2569:tz",  "s<3106:gmn", "A"}},
            {"bnt", {"s>3072:kh",  "x>1617:A",   "s<2861:A",   "A"}},
            {"nqb", {"m>787:bnt",  "mtl"}},
            {"fgj", {"x<982:pld",  "m<3732:mkh", "R"}},
            {"vmp", {"a>377:A",    "s>3562:A",   "A"}},
            {"mt",  {"x<1659:R",   "x>1949:R",   "a<86:A",     "A"}},
            {"jjr", {"a<3524:md",  "pk"}},
            {"nf",  {"a>3693:A",   "m>3721:A",   "x<1258:R",   "A"}},
            {"kmf", {"m>2616:A",   "ch"}},
            {"qqm", {"m<759:msm",  "m<1066:jx",  "s<1072:mbx", "sx"}},
            {"npf", {"s>3135:nx",  "a<607:A",    "a<735:A",    "R"}},
            {"zfz", {"a<593:R",    "m<1173:R",   "m<1287:R",   "A"}},
            {"qd",  {"x>400:R",    "a>333:A",    "s<926:A",    "A"}},
            {"md",  {"m>3814:A",   "A"}},
            {"dl",  {"s>329:A",    "R"}},
            {"xns", {"s<1829:A",   "spc"}},
            {"mf",  {"x>2942:R",   "x<1923:R",   "A"}},
            {"pc",  {"x>578:R",    "s<1159:R",   "s<1501:A",   "R"}},
            {"js",  {"x<1654:A",   "A"}},
            {"ph",  {"x<2673:A",   "a<3382:A",   "R"}},
            {"mdc", {"x>3156:A",   "A"}},
            {"kd",  {"s>2236:A",   "a<2877:A",   "s>2169:A",   "A"}},
            {"stv", {"x<1621:A",   "A"}},
            {"ttf", {"s<2002:gv",  "fr"}},
            {"fc",  {"a>2299:R",   "x>1400:A",   "R"}},
            {"llx", {"m<1282:hvf", "R"}},
            {"txx", {"m<1072:R",   "m>1107:R",   "A"}},
            {"tpk", {"m>1055:A",   "a<3918:R",   "s<2145:R",   "R"}},
            {"gz",  {"s<1406:A",   "s>2050:R",   "A"}},
            {"clq", {"s<1549:lz",  "R"}},
            {"vtz", {"a>1307:R",   "R"}},
            {"xh",  {"x>1990:R",   "s>2577:A",   "R"}},
            {"dxg", {"s<2121:R",   "m>1223:A",   "s>2179:A",   "R"}},
            {"jj",  {"m<3671:lk",  "s<3497:R",   "s>3723:xdd", "hcc"}},
            {"dlh", {"m>2519:R",   "a>2691:R",   "R"}},
            {"zkf", {"m>3525:fmm", "s>1899:jzm", "fkp"}},
            {"bcz", {"s<1775:R",   "nrs"}},
            {"hnx", {"m>3695:R",   "qk"}},
            {"frp", {"s<3328:A",   "bgs"}},
            {"jb",  {"x>3417:R",   "m<3694:R",   "R"}},
            {"htj", {"s<903:dr",   "jvf"}},
            {"qdm", {"x<2036:vj",  "s<1607:hh",  "flh"}},
            {"xn",  {"a<561:R",    "m<3597:A",   "m<3806:stv", "R"}},
            {"tlp", {"x<2194:dlh", "A"}},
            {"bm",  {"m>977:R",    "s<1159:A",   "a>2980:A",   "R"}},
            {"cr",  {"m<444:R",    "a<2515:R",   "a<2529:R",   "A"}},
            {"cq",  {"s<1598:kx",  "x>2199:ds",  "a>2582:R",   "mcv"}},
            {"jg",  {"x>719:R",    "a<322:A",    "m>425:R",    "R"}},
            {"kx",  {"a<2578:R",   "m<2783:R",   "R"}},
            {"rmb", {"m>1701:R",   "s>1741:R",   "R"}},
            {"cx",  {"s<1842:kjr", "a<2456:A",   "s<2046:ts",  "kdt"}},
            {"dh",  {"a>1396:nqb", "m<707:rx",   "a<911:lst",  "phl"}},
            {"rkm", {"s>624:A",    "m<2304:R",   "a>2285:R",   "A"}},
            {"dj",  {"s<896:R",    "s>1021:A",   "A"}},
            {"jfs", {"m>50:A",     "m<30:A",     "A"}},
            {"bj",  {"s>1901:xnj", "s<1781:dm",  "R"}},
            {"sdm", {"s<2101:A",   "s<2351:R",   "A"}},
            {"cnb", {"a>669:gfj",  "xh"}},
            {"jvb", {"x<1067:nnl", "a<3877:R",   "x>1216:R",   "A"}},
            {"td",  {"x<1697:pv",  "m>565:st",   "bzm"}},
            {"bzm", {"m<433:sdm",  "a<3012:R",   "A"}},
            {"jtn", {"a<200:R",    "x>576:A",    "x>340:A",    "R"}},
            {"rct", {"x>835:R",    "a>1372:A",   "A"}},
            {"pbt", {"m>3727:R",   "a<3631:A",   "x<2581:R",   "R"}},
            {"vtx", {"s<2246:txg", "x>1434:cf",  "rrx"}},
            {"hfs", {"m<3564:mvc", "x>2387:xzp", "s<1647:qcm", "A"}},
            {"ctc", {"s<3638:fc",  "R"}},
            {"lvh", {"m>1112:A",   "m<1095:R",   "x<1917:A",   "R"}},
            {"km",  {"a>3774:A",   "m>3368:A",   "s<2096:R",   "A"}},
            {"hg",  {"s<2175:A",   "s>2402:lqb", "hn"}},
            {"mv",  {"a<3791:A",   "a>3912:prx", "R"}},
            {"pq",  {"s<395:R",    "s>768:A",    "m<1330:R",   "R"}},
            {"mnv", {"a>3937:R",   "R"}},
            {"cgn", {"s>1534:A",   "a<1782:A",   "A"}},
            {"hfj", {"a<1252:A",   "m<3238:A",   "s>1189:R",   "A"}},
            {"vgm", {"x>1551:A",   "s>726:A",    "A"}},
            {"xdd", {"a>3845:A",   "m>3687:R",   "R"}},
            {"mjl", {"s>3637:R",   "s<3353:nz",  "A"}},
            {"kdd", {"x<3760:fmt", "x<3872:A",   "m<1006:A",   "R"}},
            {"sz",  {"s<2416:A",   "a<3004:kt",  "R"}},
            {"xjk", {"a<3328:R",   "a>3466:R",   "mdh"}},
            {"tf",  {"a<1495:lsl", "a>2641:qqm", "gn"}},
            {"rcq", {"s<784:R",    "x<1815:A",   "A"}},
            {"pqk", {"m<2915:vfv", "m>3530:R",   "R"}},
            {"lj",  {"m<3698:sl",  "s<1487:fgj", "xns"}},
            {"bt",  {"m>3937:A",   "R"}},
            {"mjn", {"a<3737:A",   "a<3910:R",   "fmd"}},
            {"bzn", {"m>1148:tg",  "a>2948:cvg", "qht"}},
            {"vj",  {"s<2479:R",   "m>2514:R",   "s>3114:A",   "A"}},
            {"pk",  {"m<3785:R",   "m<3925:A",   "A"}},
            {"rd",  {"s<770:R",    "x<757:A",    "s<872:A",    "A"}},
            {"hnc", {"x>1219:xn",  "gkm"}},
            {"qk",  {"x<894:R",    "m<3674:R",   "R"}},
            {"nnl", {"s>432:A",    "R"}},
            {"lhf", {"s>1783:A",   "m>2962:A",   "R"}},
            {"rtk", {"x<590:R",    "x<975:R",    "a>3259:R",   "A"}},
            {"zd",  {"m<1376:zh",  "s<1580:R",   "lxg"}},
            {"hs",  {"s<1492:R",   "m>3665:R",   "A"}},
            {"tg",  {"s<2247:llx", "zj"}},
            {"rrx", {"m<3208:R",   "x>1262:R",   "x>1206:R",   "R"}},
            {"fkp", {"a<1091:R",   "a>1372:A",   "hfj"}},
            {"qq",  {"s>2866:A",   "R"}},
            {"txp", {"s<1757:nh",  "lnz"}},
            {"qcf", {"s>3084:R",   "A"}},
            {"chq", {"x<2326:A",   "s>790:A",    "x<2514:R",   "R"}},
            {"zrk", {"x>2475:R",   "m<2352:R",   "A"}},
            {"hc",  {"s<3171:cnb", "vzs"}},
            {"pdv", {"s>1694:hc",  "htj"}},
            {"mtl", {"a>2562:A",   "s<3387:nfs", "a<1966:R",   "R"}},
            {"sv",  {"s<3288:R",   "x<1848:A",   "R"}},
            {"cj",  {"m>522:A",    "R"}},
            {"nz",  {"x<3106:R",   "a>3915:R",   "A"}},
            {"vgd", {"x<207:R",    "m>2937:R",   "a<1846:A",   "A"}},
            {"rzg", {"a>3598:hts", "R"}},
            {"dzk", {"s>2875:R",   "a<3368:A",   "R"}},
            {"fmm", {"s>1385:A",   "a>817:A",    "jb"}},
            {"kxh", {"x<512:A",    "x>704:R",    "A"}},
            {"xm",  {"x>3079:R",   "R"}},
            {"rlx", {"x<2946:ssj", "x<3395:ckk", "m<1126:kdd", "qsz"}},
            {"cxm", {"m<1297:R",   "A"}},
            {"xlm", {"m<3363:lrg", "fdl"}},
            {"qsz", {"a>2068:zq",  "R"}},
            {"gh",  {"x<2722:km",  "x>2801:R",   "m<3266:R",   "R"}},
            {"vs",  {"a>1978:bpc", "x<2043:qpm", "rk"}},
            {"fpm", {"s>1180:vgd", "x<258:R",    "A"}},
            {"zb",  {"s>3696:R",   "xg"}},
            {"vfv", {"x>2448:R",   "m<1999:R",   "R"}},
            {"jvf", {"a>1057:pgk", "R"}},
            {"zj",  {"a<2790:xj",  "a>3352:A",   "x<1345:tqd", "vts"}},
            {"hkr", {"a>3732:A",   "x>711:R",    "A"}},
            {"dsp", {"a>1078:nxj", "m>975:A",    "A"}},
            {"dx",  {"x>2822:R",   "sn"}},
            {"hd",  {"s<2428:qt",  "m>3374:dhm", "a<3823:qqf", "bhl"}},
            {"ftj", {"s>2579:dh",  "a<2113:ttf", "m<892:mx",   "bzn"}},
            {"mkh", {"m<3720:A",   "s>1274:A",   "R"}},
            {"vl",  {"x>1641:jls", "x<807:A",    "s>913:ktq",  "cj"}},
            {"crb", {"a<3406:A",   "R"}},
            {"dq",  {"m>3694:A",   "x<678:R",    "a>3755:A",   "scs"}},
            {"qjt", {"a<3401:rtk", "a>3454:ztb", "A"}},
            {"np",  {"x<2860:A",   "R"}},
            {"rv",  {"x<763:A",    "A"}},
            {"bf",  {"s<1946:A",   "R"}},
            {"pjk", {"s>618:djs",  "R"}},
            {"vx",  {"x>1751:A",   "R"}},
            {"gfj", {"x>2306:R",   "R"}},
            {"cvg", {"a<3628:qqn", "rts"}},
            {"dhg", {"m>1688:zbx", "m>1551:A",   "hbv"}},
            {"zqr", {"m<3749:A",   "x<987:R",    "a>3895:A",   "A"}},
            {"sf",  {"x<1168:qnr", "x<1554:jjr", "a>3519:dvz", "ngc"}},
            {"blz", {"x<2324:xnx", "m>3634:zz",  "x>2570:gh",  "mjn"}},
            {"zg",  {"a>3363:A",   "m>3389:A",   "R"}},
            {"lxg", {"s>1646:R",   "s<1608:A",   "s>1631:A",   "R"}},
            {"vn",  {"s<2757:zr",  "a<3910:A",   "a>3961:A",   "A"}},
            {"dnl", {"s>1311:vx",  "a<3248:A",   "qm"}},
            {"qm",  {"a>3722:A",   "R"}},
            {"jf",  {"m<994:A",    "R"}},
            {"lq",  {"s<3179:A",   "jd"}},
            {"lpq", {"s>3282:vmp", "s>2926:A",   "s<2718:zfz", "A"}},
            {"ls",  {"m<3734:pjh", "m>3754:tc",  "s<3231:R",   "R"}},
            {"zh",  {"a<3367:A",   "s<1566:A",   "s<1637:A",   "A"}},
            {"vf",  {"s>1463:kk",  "s>1304:A",   "gx"}},
            {"kh",  {"x<1450:A",   "A"}},
            {"rhv", {"s>3306:R",   "A"}},
            {"pld", {"s>1209:A",   "a<3823:A",   "x<409:R",    "A"}},
            {"lfr", {"x<3457:A",   "a<669:R",    "A"}},
            {"zhs", {"s<3266:A",   "a>1355:A",   "x>2573:R",   "R"}},
            {"dpn", {"m<2862:R",   "x>2400:A",   "R"}},
            {"zl",  {"x>2727:A",   "x>2192:A",   "A"}},
            {"tz",  {"s>1150:R",   "s>426:R",    "s<176:A",    "R"}},
            {"krs", {"m<2856:pdv", "htm"}},
            {"tqd", {"a<2979:A",   "x<502:A",    "m<1339:A",   "A"}},
            {"ch",  {"x<2847:A",   "m>1957:R",   "R"}},
            {"pqp", {"m<2055:dhg", "m<2603:tp",  "xxz"}},
            {"lh",  {"x>1949:gf",  "a<3601:tdp", "m<3635:hd",  "xmg"}},
            {"hvf", {"a>2819:A",   "x<1830:R",   "R"}},
            {"zvv", {"a<3953:R",   "R"}},
            {"dzc", {"m>950:A",    "R"}},
            {"mx",  {"m>308:td",   "tvp"}},
            {"xt",  {"m>3743:R",   "a<3740:nf",  "R"}},
            {"zqk", {"m<516:ft",   "m<883:bf",   "x<1639:R",   "R"}},
            {"vq",  {"s<2233:A",   "s<2350:A",   "A"}},
            {"xb",  {"m<903:R",    "R"}},
            {"lqh", {"x<2091:R",   "A"}},
            {"zr",  {"a>3919:A",   "x>1276:A",   "x<690:A",    "R"}},
            {"in",  {"m<1457:kf",  "szv"}},
            {"xg",  {"m>2358:A",   "A"}},
            {"rb",  {"x>1307:R",   "s>2733:R",   "hv"}},
            {"st",  {"a<2850:A",   "vbf"}},
            {"tbm", {"a>3715:kcd", "m>2410:rlm", "stn"}},
            {"zjk", {"s<2242:hz",  "x<2870:gt",  "vtz"}},
            {"shc", {"a<2332:R",   "A"}},
            {"drb", {"a>3328:hfs", "a<3240:jsr", "ztx"}},
            {"tq",  {"m>2044:A",   "s>1419:R",   "m>1835:tj",  "R"}},
            {"tvp", {"x<1506:hg",  "s<2159:lt",  "m<126:vvd",  "sz"}},
            {"dtb", {"a>2641:R",   "A"}},
            {"mbx", {"m>1293:fn",  "s<417:zn",   "rh"}},
            {"ln",  {"m>136:R",    "m<83:A",     "m<110:A",    "R"}},
            {"gf",  {"x>2871:cd",  "a>3436:blz", "drb"}},
            {"hbm", {"x<756:qns",  "x<1386:R",   "m<3894:R",   "bt"}},
            {"jsr", {"m<3426:A",   "A"}},
            {"bmb", {"m>3851:R",   "A"}},
            {"nxg", {"x>1128:qcf", "R"}},
            {"dnz", {"s>3099:A",   "R"}},
            {"qdk", {"x>1536:R",   "a<3185:R",   "xk"}},
            {"jz",  {"m>573:js",   "s<809:A",    "x>1381:vt",  "pc"}},
            {"hgq", {"x>3568:A",   "A"}},
            {"db",  {"m<34:A",     "s<1263:A",   "A"}},
            {"hts", {"a>3856:A",   "a<3741:A",   "A"}},
            {"lsl", {"m<587:xr",   "zpx"}},
            {"dv",  {"a<1753:gdk", "R"}},
            {"mh",  {"x>365:R",    "m<2574:R",   "s>3648:R",   "R"}},
            {"cc",  {"m<367:A",    "R"}},
            {"zpx", {"a<835:jp",   "a>1137:spn", "zcq"}},
            {"hv",  {"s<2493:A",   "s>2632:R",   "s<2564:A",   "R"}},
            {"lnz", {"s>1813:R",   "s>1793:A",   "R"}},
            {"xsg", {"x<1276:R",   "m<3419:jrb", "A"}},
            {"qmk", {"x<446:R",    "m<3220:hkr", "dnz"}},
            {"rr",  {"a>3328:A",   "A"}},
    };

    decltype(input_real) input_test{
            {"px",  {"a<2006:qkq", "m>2090:A",   "rfg"}},
            {"pv",  {"a>1716:R",   "A"}},
            {"lnx", {"m>1548:A",   "A"}},
            {"rfg", {"s<537:gd",   "x>2440:R",   "A"}},
            {"qs",  {"s>3448:A",   "lnx"}},
            {"qkq", {"x<1416:A",   "crn"}},
            {"crn", {"x>2662:A",   "R"}},
            {"in",  {"s<1351:px",  "qqz"}},
            {"qqz", {"s>2770:qs",  "m<1801:hdj", "R"}},
            {"gd",  {"a>3333:R",   "R"}},
            {"hdj", {"m>838:A",    "pv"}}
    };
//    auto &input = input_test;
    auto &input = input_real;


    // x<123:R or just A
    using Condition = std::vector<std::string>;
    using ConditionSet = std::vector<Condition>;
    using Workflow = std::map<std::string, ConditionSet>;

    std::vector<std::string> split(const std::string &s, char delim) {
        std::vector<std::string> result;
        std::istringstream ss(s);
        std::string item;

        while (getline(ss, item, delim)) {
            result.push_back(item);
        }

        return result;
    }


    ll toLL(const std::string &str) {
        char *endptr = nullptr;
        ll num = strtoll(str.c_str(), &endptr, 10);
        assert(endptr == str.data() + str.size());
        return num;
    }

    struct Part {
        ll x;
        ll m;
        ll a;
        ll s;

        std::string toString() const {
            std::ostringstream str;
            str << "{x=" << x << ",m=" << m << ",a=" << a << ",s=" << s << "}";
            return str.str();
        }

        ll getField(const std::string &field) const {
            ASSERT_EQ(field.size(), 1);
            switch (field[0]) {
                case 'x' :
                    return x;
                case 'm' :
                    return m;
                case 'a' :
                    return a;
                case 's' :
                    return s;
            }
            assert(false);
        }

        std::optional<std::string> evaluate(const Condition &condition) const {
            ASSERT_EQ(condition.size(), 2);

            auto &comparison = condition.at(0);
            auto &followup_condition = condition.at(1);

            if (auto smaller = split(comparison, '<'); smaller.size() == 2) {
                return (getField(smaller[0]) < toLL(smaller[1])) ? std::make_optional(followup_condition)
                                                                 : std::nullopt;
            }
            auto larger = split(comparison, '>');
            ASSERT_EQ(larger.size(), 2);
            return (getField(larger[0]) > toLL(larger[1])) ? std::make_optional(followup_condition) : std::nullopt;
        }

        std::string evaluate(const ConditionSet &condition_set) const {
            for (ll c = 0; c < condition_set.size() - 1; c++) {
                if (auto maybe_workflow = evaluate(condition_set[c])) {
                    return *maybe_workflow;
                }
            }
            ASSERT_EQ(condition_set.back().size(), 1);
            return condition_set.back().at(0);
        }

        std::string evaluate(const Workflow &workflow) const {
            auto conditions = workflow.at("in");

            while (true) {
                auto result = evaluate(conditions);
                if (result == "R" || result == "A") {
                    return result;
                }
                conditions = workflow.at(result);
            }
            assert(false);
        }
    };

    std::vector<Part> part_test{
            {787,  2655, 1222, 2876},
            {1679, 44,   2067, 496},
            {2036, 264,  79,   2244},
            {2461, 1339, 466,  291},
            {2127, 1623, 2188, 1013},
    };

    std::vector<Part> part_real{
            {555,  85,   257,  1864},
            {561,  159,  473,  524},
            {1,    1419, 1233, 675},
            {1089, 766,  1101, 2378},
            {1010, 662,  1172, 2016},
            {2979, 1043, 169,  1191},
            {100,  379,  1959, 1262},
            {1782, 2770, 3430, 344},
            {3185, 1618, 156,  13},
            {834,  666,  1565, 1106},
            {2134, 2304, 222,  2574},
            {1138, 953,  296,  1331},
            {973,  84,   1449, 1053},
            {872,  810,  918,  77},
            {1796, 994,  441,  3453},
            {2566, 1336, 1625, 72},
            {596,  208,  380,  1858},
            {838,  217,  620,  595},
            {404,  238,  2051, 62},
            {1150, 1729, 227,  1352},
            {652,  255,  257,  115},
            {1,    632,  554,  2230},
            {1116, 1646, 2196, 691},
            {1498, 59,   503,  546},
            {1471, 3369, 692,  190},
            {1026, 1795, 593,  549},
            {50,   1170, 2057, 751},
            {74,   562,  926,  348},
            {2649, 597,  117,  1675},
            {651,  1092, 395,  1332},
            {56,   1418, 866,  1866},
            {232,  1836, 163,  546},
            {699,  472,  423,  2767},
            {150,  2686, 637,  281},
            {99,   1703, 237,  74},
            {136,  3409, 1103, 1570},
            {1409, 185,  2260, 610},
            {1637, 2277, 150,  27},
            {515,  1482, 298,  3343},
            {710,  820,  459,  508},
            {1337, 776,  67,   607},
            {1987, 565,  2309, 1127},
            {724,  243,  330,  863},
            {73,   1092, 790,  523},
            {2645, 3064, 866,  389},
            {895,  2653, 419,  3558},
            {2098, 518,  1856, 3256},
            {655,  194,  1988, 1864},
            {1433, 1887, 1790, 1238},
            {2053, 535,  337,  958},
            {244,  1087, 2686, 901},
            {1170, 1684, 411,  1889},
            {726,  1934, 1618, 443},
            {1332, 1810, 380,  422},
            {649,  1852, 1,    2544},
            {3146, 437,  2784, 10},
            {596,  491,  2173, 327},
            {88,   207,  48,   444},
            {452,  40,   39,   2294},
            {99,   499,  1671, 101},
            {1220, 1274, 376,  297},
            {2330, 137,  100,  923},
            {1581, 687,  2567, 317},
            {429,  186,  163,  1936},
            {797,  2500, 1780, 2179},
            {186,  2375, 2173, 363},
            {320,  48,   1853, 982},
            {1055, 2256, 41,   914},
            {527,  1721, 119,  2447},
            {75,   126,  1660, 393},
            {18,   1989, 10,   129},
            {1552, 142,  599,  453},
            {735,  1193, 365,  2696},
            {1489, 6,    932,  92},
            {212,  2273, 145,  1142},
            {1237, 200,  712,  61},
            {117,  1395, 3696, 3625},
            {1004, 1531, 1623, 44},
            {935,  1000, 1599, 261},
            {12,   2868, 43,   803},
            {1335, 1559, 2373, 334},
            {278,  409,  1180, 948},
            {1190, 804,  267,  53},
            {800,  1523, 866,  286},
            {160,  3245, 1135, 477},
            {1299, 2492, 970,  105},
            {2643, 928,  56,   1661},
            {214,  2863, 2692, 348},
            {178,  1747, 916,  126},
            {12,   302,  857,  302},
            {433,  120,  1018, 3452},
            {461,  1048, 196,  1933},
            {665,  594,  2435, 8},
            {1135, 2290, 259,  741},
            {886,  560,  881,  278},
            {1429, 1225, 245,  269},
            {3164, 346,  1088, 3245},
            {137,  248,  2201, 451},
            {190,  175,  1798, 86},
            {2769, 2152, 2079, 960},
            {932,  184,  52,   131},
            {815,  2580, 1474, 3349},
            {1257, 1833, 974,  16},
            {593,  685,  649,  1583},
            {756,  2884, 602,  438},
            {221,  399,  579,  68},
            {1368, 1064, 110,  144},
            {14,   576,  1284, 1241},
            {2791, 689,  76,   171},
            {281,  216,  264,  635},
            {270,  235,  1566, 226},
            {740,  1145, 111,  415},
            {194,  2410, 272,  176},
            {3068, 259,  164,  222},
            {594,  191,  439,  12},
            {26,   256,  278,  1457},
            {276,  489,  1479, 2972},
            {601,  216,  1040, 1666},
            {765,  1805, 485,  304},
            {1533, 1953, 658,  10},
            {4,    11,   766,  89},
            {483,  1013, 1281, 1708},
            {2284, 49,   55,   150},
            {558,  254,  20,   22},
            {441,  330,  148,  1761},
            {1956, 422,  2927, 324},
            {387,  1026, 568,  3575},
            {703,  852,  293,  341},
            {2347, 258,  1681, 3083},
            {142,  451,  450,  228},
            {83,   2112, 1696, 60},
            {2408, 1812, 228,  815},
            {31,   952,  125,  550},
            {55,   2535, 10,   3172},
            {303,  264,  161,  525},
            {140,  979,  548,  2664},
            {107,  1615, 111,  2000},
            {812,  600,  349,  950},
            {1900, 724,  1278, 1492},
            {370,  1483, 636,  2186},
            {314,  711,  548,  1023},
            {615,  2745, 1560, 1901},
            {875,  1076, 1257, 129},
            {1918, 935,  250,  372},
            {2814, 894,  397,  619},
            {1894, 1200, 1263, 163},
            {361,  2982, 1094, 552},
            {376,  764,  3825, 1272},
            {197,  6,    431,  2883},
            {916,  258,  1016, 13},
            {1550, 255,  420,  193},
            {2448, 646,  951,  3294},
            {51,   47,   1154, 1582},
            {780,  1994, 190,  613},
            {2125, 2036, 419,  370},
            {3530, 653,  112,  2043},
            {830,  1481, 1151, 826},
            {39,   605,  58,   1708},
            {605,  918,  2267, 77},
            {2308, 436,  753,  820},
            {2078, 2190, 460,  2282},
            {165,  2188, 460,  416},
            {2343, 2285, 718,  478},
            {139,  578,  867,  3364},
            {212,  26,   1613, 393},
            {134,  318,  237,  1171},
            {23,   233,  85,   876},
            {89,   157,  2290, 1932},
            {96,   377,  49,   1760},
            {1064, 78,   798,  160},
            {1983, 800,  19,   1766},
            {1157, 1617, 1270, 425},
            {145,  1754, 517,  915},
            {98,   46,   1762, 1202},
            {13,   359,  3358, 348},
            {1221, 231,  81,   1975},
            {1523, 385,  1671, 1234},
            {279,  96,   27,   743},
            {1718, 1694, 886,  1199},
            {1640, 77,   879,  925},
            {239,  73,   2374, 349},
            {1774, 319,  212,  379},
            {2525, 693,  1126, 1932},
            {1842, 1318, 714,  2978},
            {286,  1087, 916,  70},
            {61,   205,  15,   2176},
            {804,  1845, 2665, 664},
            {79,   16,   1376, 2558},
            {1018, 1624, 1798, 150},
            {2670, 615,  733,  229},
            {1221, 2070, 238,  201},
            {465,  947,  1251, 1679},
            {1161, 1334, 57,   1731},
            {239,  388,  42,   2493},
            {1540, 3200, 849,  89},
            {179,  2098, 724,  144},
            {1605, 636,  3162, 247},
            {1128, 145,  988,  662},
            {1716, 1127, 1354, 1470},
            {2411, 92,   482,  1395},
    };

    struct TraversalContext {
        ll x_min = 1;
        ll x_max = 4000;
        ll m_min = 1;
        ll m_max = 4000;
        ll a_min = 1;
        ll a_max = 4000;
        ll s_min = 1;
        ll s_max = 4000;

        std::string toString() const {
            std::ostringstream str;
            str
                    << "{x=[" << x_min << "," << x_max << "],"
                    << "m=[" << m_min << "," << m_max << "],"
                    << "a=[" << a_min << "," << a_max << "],"
                    << "s=[" << s_min << "," << s_max << "]}";
            return str.str();
        }

        std::tuple<ll, ll> getField(const std::string &field) const {
            ASSERT_EQ(field.size(), 1);
            switch (field[0]) {
                case 'x' :
                    return {x_min, x_max};
                case 'm' :
                    return {m_min, m_max};;
                case 'a' :
                    return {a_min, a_max};;
                case 's' :
                    return {s_min, s_max};;
            }
            assert(false);
        }

        void setField(const std::string &field, std::tuple<ll, ll> min_max) {
            ASSERT_EQ(field.size(), 1);
            switch (field[0]) {
                case 'x' :
                    std::tie(x_min, x_max) = min_max;
                    break;
                case 'm' :
                    std::tie(m_min, m_max) = min_max;
                    break;
                case 'a' :
                    std::tie(a_min, a_max) = min_max;
                    break;
                case 's' :
                    std::tie(s_min, s_max) = min_max;
                    break;
                default:
                    assert(false);
            }
        }


        std::optional<TraversalContext> applyRestrictionForMax(const std::string &field, ll restriction_max) const {
            auto [field_min, field_max] = getField(field);
            assert(restriction_max >= 0);
            field_max = std::min(field_max, restriction_max);
            if (field_min > field_max) {
                return std::nullopt;
            }
            TraversalContext new_context = *this;
            new_context.setField(field, {field_min, field_max});
            return new_context;
        }

        std::optional<TraversalContext> applyRestrictionForMin(const std::string &field, ll restriction_min) const {
            auto [field_min, field_max] = getField(field);
            assert(restriction_min >= 0);
            field_min = std::max(field_min, restriction_min);
            if (field_min > field_max) {
                return std::nullopt;
            }
            TraversalContext new_context = *this;
            new_context.setField(field, {field_min, field_max});
            return new_context;
        }

        std::optional<TraversalContext>
        applyRestriction(const std::vector<std::string> &condition, bool inverted) const {
            auto &comparison = condition.at(0);

            if (auto smaller = split(comparison, '<'); smaller.size() == 2) {
                if (!inverted) {
                    return applyRestrictionForMax(smaller[0], toLL(smaller[1]) - 1);
                }
                return applyRestrictionForMin(smaller[0], toLL(smaller[1]));
            }
            auto larger = split(comparison, '>');
            ASSERT_EQ(larger.size(), 2);
            if (!inverted) {
                return applyRestrictionForMin(larger[0], toLL(larger[1]) + 1);
            }
            return applyRestrictionForMax(larger[0], toLL(larger[1]));
        }

        bool operator<(const TraversalContext &other) const {
            return std::tie(this->x_min,
                            this->x_max,
                            this->m_min,
                            this->m_max,
                            this->a_min,
                            this->a_max,
                            this->s_min,
                            this->s_max
            ) < std::tie(other.x_min,
                         other.x_max,
                         other.m_min,
                         other.m_max,
                         other.a_min,
                         other.a_max,
                         other.s_min,
                         other.s_max
            );
        }
    };

    // Meeting of condition N means that all previous
    // conditions (0, 1, 2, ..., N -1) were accepted as inverted conditions.
    std::optional<TraversalContext>
    applyRestriction(const TraversalContext &context, const ConditionSet &conditions_set, ll condition_nr) {
        std::optional<TraversalContext> context_after_restrictions{context};
        for (ll previous_condition_nr = 0; previous_condition_nr < condition_nr; previous_condition_nr++) {
            context_after_restrictions = context_after_restrictions->applyRestriction(
                    conditions_set.at(previous_condition_nr), true);
            if (!context_after_restrictions) {
                return context_after_restrictions;
            }
        }
        if (condition_nr != conditions_set.size() - 1) {
            context_after_restrictions = context_after_restrictions->applyRestriction(conditions_set.at(condition_nr),
                                                                                      false);
        }
        return context_after_restrictions;
    }

    // We traverse all workflows in order to find the way to reach "A".
    // We simulate the acceptance by the condition 0, condition 1, condition 2, ..., unconditional
    std::set<TraversalContext> accepted_ranges;

    void traverse(const TraversalContext &context, const ConditionSet &conditions_set, const Workflow &workflow) {
        for (ll condition_nr = 0; condition_nr < conditions_set.size(); condition_nr++) {
            auto &followup_condition_set = conditions_set.at(condition_nr).back();
            if (followup_condition_set == "R") {
                // we are not trying to be rejected
                continue;
            }
            if (auto maybe_context_after_restrictions = applyRestriction(context, conditions_set, condition_nr)) {
                if (followup_condition_set == "A") {
                    accepted_ranges.insert(*maybe_context_after_restrictions);
                } else {
                    traverse(*maybe_context_after_restrictions, workflow.at(followup_condition_set), workflow);
                }
            }
        }

    }

    // I found out that the workflow contains many tautological condition sets
    // E.g. txg{s>810:R,m<3165:R,a<3430:R,R} or ft{s<1931:A,m>277:A,A}
    // I though there we might fold them into a couple of easily recognizable ranges.
    // Apparently only 100 conditions sets were tautological (~20%).
    // This optimization appeared to be useless and can be omitted.
    Workflow removeTautologicalConditionSets(const Workflow &workflow) {
        auto modified_workflow = workflow;
        std::set < std::string > As;
        std::set < std::string > Rs;

        do {
            As.clear();
            Rs.clear();
            for (auto &[condition_set_name, conditions_set]: modified_workflow) {
                auto all_As = true;
                auto all_Rs = true;
                for (auto &condition: conditions_set) {
                    all_As &= (condition.back() == "A");
                    all_Rs &= (condition.back() == "R");
                }
                if (all_As) {
                    As.insert(condition_set_name);
                }
                if (all_Rs) {
                    Rs.insert(condition_set_name);
                }
            }

            for (auto it = modified_workflow.begin(); it != modified_workflow.end();) {
                if (As.contains(it->first) || Rs.contains(it->first)) {
                    it = modified_workflow.erase(it);
                } else {
                    for (auto &condition: it->second) {
                        auto &followup_condition_set = condition.back();
                        if (As.contains(followup_condition_set)) {
                            followup_condition_set = "A";
                        } else if (Rs.contains(followup_condition_set)) {
                            followup_condition_set = "R";
                        }
                    }
                    ++it;
                }
            }

        } while (!As.empty() || !Rs.empty());
        return modified_workflow;
    }
}

int main19() {
    int64_t result0 = 0;
    int64_t result1 = 0;

    // Same as original structure but with conditions split after ':'
    // That's for an easy replacement of tautological condition sets
    Workflow workflow;
    for (auto [workflow_name, conditions_set]: input) {
        ConditionSet split_condition_set;
        for (auto &conditions: conditions_set) {
            split_condition_set.push_back(split(conditions, ':'));
        }
        workflow.emplace(workflow_name, std::move(split_condition_set));
    }

    myprint(workflow.size());
    // This optimization was intended to be a solution for part2.
    // However it reduced the workflow by only 100 condition sets (20%).
    // It produces less fragmented `accepted_ranges` but doesn't improve anything
    // dramatically. Here for the history.
    workflow = removeTautologicalConditionSets(workflow);
    myprint(workflow.size());

    for (const auto &part: part_real) {
        auto result = part.evaluate(workflow);
        if (result == "A") {
            result0 += (part.x + part.m + part.a + part.s);
        }
    }
    myprint(result0);
    ASSERT_EQ(result0, 352052);

    const TraversalContext initial_context;
    traverse(initial_context, workflow.at("in"), workflow);
    myprint(accepted_ranges.size());

    for (auto &range: accepted_ranges) {
        ll combinations = (range.x_max - range.x_min + 1) *
                          (range.m_max - range.m_min + 1) *
                          (range.a_max - range.a_min + 1) *
                          (range.s_max - range.s_min + 1);
        result1 += combinations;
    }

    myprint(result1);
    ASSERT_EQ(result1, 116606738659695ll);
    return 0;
}
